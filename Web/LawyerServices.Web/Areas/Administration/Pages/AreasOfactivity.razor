@page "/activity"
@using LawyerServices.Common.AreasOfActivityViewModels
@using LawyerServices.Common.LawyerViewModels
@using LawyerServices.Services.Data.AdminServices
@using LawyerServices.Services.Data.AdminServices.AreasOfActivityServices
@using System.Security.Claims

@inject IAreasOfActivityService areaService;
@inject IHttpContextAccessor httpContextAccessor
@inject IUserService userService

@layout Administration.Shared.AdminLayout

<div class="container card-3">
    <h3>AreasOfactivity</h3>
    <div class="row">
        @foreach (var item in allAreas)
        {
            <div class="col-sm-4 ">
                <div class="card marg">
                    <div class="card-body">
                        @if (existingAreas.Contains(item.Id))
                        {   
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@item.Id" onclick="@(() => OnBynd(item.Id.ToString()))" checked>
                                <label class="form-check-label" for="flexCheckDefault">
                                    @item.Name
                                </label>
                            </div>
                        }
                        else
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@item.Id" onclick="@(() => OnBynd(item.Id.ToString()))">
                                <label class="form-check-label" for="flexCheckDefault">
                                    @item.Name
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>
          @*  <div class="col">
                @if (existingAreas.Contains(item.Id))
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="@item.Id" onclick="@(() => OnBynd(item.Id.ToString()))" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            @item.Name
                        </label>
                    </div>
                }
                else
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="@item.Id" onclick="@(() => OnBynd(item.Id.ToString()))">
                        <label class="form-check-label" for="flexCheckDefault">
                            @item.Name
                        </label>
                    </div>

                }
            </div>*@

        }
        <button class="btn btn-primary" onclick="@OnSaveAreas">Click me</button>

        <div class="form-check">
            <input class="form-check-input" asp-for="model.Copyright" type="checkbox" value="Авторско право" onclick="@(() => OnBynd("Авторско право"))">
            <label class="form-check-label" for="flexCheckDefault">
                Авторско право
            </label>
        </div>
    </div>
    <div class="form-group">
        <label for="exampleFormControlTextarea1">Large textarea</label>
        <textarea class="form-control rounded-0" id="exampleFormControlTextarea1" rows="10"></textarea>
    </div>


    <EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-conrol">
            <label>
                <InputTextArea @bind-Value="starship.Name" DisplayName="Production Date" />
            </label>
        </div>
        <button type="submit">Submit</button>
    </EditForm>
</div>

<style>

    .form-control:focus {
        border-color: #FF0000;
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(255, 0, 0, 0.6);
    }

    .card-3 {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    }
    .marg{
      margin-bottom: 10px;
      border-color:blanchedalmond;
    }
</style>
@code {

    AreasOfActivityInputModel model;
    MoreInformationViewModel moreInformation;
    private List<AreasOfActivityViewModel> allAreas;
    private List<string> existingAreas;
    private IList<string> areasToAdd;
    public class MyObject
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    public class Starship
    {
        public bool boool { get; set; }
        public string Name { get; set; }
    }
    private Starship starship = new() { Name = "dasdadasd" };

    protected override void OnInitialized()
    {
        var principal = httpContextAccessor.HttpContext?.User;
        allAreas = areaService.AllAreas().ToList();
        areasToAdd = new List<string>();
        existingAreas = areaService.GetAllAreasByCompanyId(this.userService.GetUserId(principal)).ToList();    
    }
    private void HandleValidSubmit()
    {

    }


    void OnChange(IEnumerable<string> value, string name)
    {

    }
    void OnBynd(string value)
    {
        //check state to click many times
        if (areasToAdd.Contains(value))
        {
            areasToAdd.Remove(value);
        }
        else
        {
            areasToAdd.Add(value);
        }
    }
    public async Task OnSaveAreas()
    {
        var principal = httpContextAccessor.HttpContext?.User;
        var userId = this.userService.GetUserId(principal);

        await this.areaService.CreateAreas(areasToAdd, userId);
    }
}

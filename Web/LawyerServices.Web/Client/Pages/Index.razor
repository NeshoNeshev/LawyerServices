@page "/"
@using LawyerServices.Web.Shared
@inject IHttpClientFactory ClientFactory
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class = "container mt-2 mb-2">  
    <RadzenTabs SelectedIndex="0">
    <Tabs>
        <RadzenTabsItem Text="Търси адвокат" class="text-center">
            <RadzenCard>
                    <h4 class="mb-4">Търси по град</h4>
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                    Data=@(towns?.Select(c => c.Name).Distinct())
                                    Change=@(args => OnChange(args, "DropDown")) />
                </RadzenCard>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Zip/Postal Code" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox style="width: 100%;" Name="Zip" />
                </div>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Търси нотариус">
            <div class="col-md-6 col-lg-4 col-xl-3 p-3">
                 <RadzenCard>
                    <h4 class="mb-4">Търси по град</h4>
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                    Data=@(towns?.Select(c => c.Name).Distinct())
                                    Change=@(args => OnChange(args, "DropDown")) />
                </RadzenCard>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


</div>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    private CountryViewModel? country;

    MyObject myModel = new MyObject();

    IEnumerable<TownViewModel>? towns;
    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("LawyerServices.Web.ServerAPI.NoAuthenticationClient");
        country = await client.GetFromJsonAsync<CountryViewModel>("Home");
        towns = country?.Towns.ToList();
        //try
        //{

        //}
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
    }

    void OnChange(object value, string name)
    {
        //var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
    }
    void ChangeBound(object value, string name)
    {

    }
    class MyObject
    {
        public int? MyValue { get; set; } = 3;
    }
}
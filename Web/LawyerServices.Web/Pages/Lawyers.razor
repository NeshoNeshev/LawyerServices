@page "/lawyers"
@page "/lawyers/{SearchByTown}"
@page "/lawyers/{SearchByTown}/{SearchByArea}"

@using LawyerServices.Common.AministrationViewModels
@using LawyerServices.Common.AreasOfActivityViewModels
@using LawyerServices.Common.LawyerViewModels
@using LawyerServices.Services.Data
@using LawyerServices.Services.Data.AdminServices.AreasOfActivityServices

@inject ITownService townService
@inject IAreasOfActivityService areaService
@inject ISearchService searchService
<div class = "container mt-lg-5">

    <div class="row ">
        
       
             <RadzenCard>
                 <h1 class="text-center">Адвокати</h1>
                 <div class="row">
                    <div class="col">
                        <RadzenDropDown AllowClear="true" TValue="string" Placeholder="@SearchByTown" Class="w-100"
                                    Data=@(towns.Select(c => c.Name).Distinct())
                                    Change=@(args => OnChange(args, "DropDown")) />
                    </div>
                    <div class="col">
                        <RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                            Data=@(areas.Select(c => c.Name).Distinct().AsQueryable())
                                            Change=@(args => OnChangeArea(args, "DropDownDataGrid")) Class="w-100" />
                    </div>
                    
                    </div>
                </RadzenCard>
           @* <div class="col">
                <RadzenCard>
                    <h4 class="mb-4">Binding to simple collection</h4>
                    
                </RadzenCard>

            </div>*@
    </div>
    <RadzenCard class="m-3" Style="border-color:black">
        <div class="row">
            <div class="col-sm-3 col-3">
                <img class="img-fluid search-result-thumb" src="https://superdoc.bg/photos/doctors/small/WUVdW6ArIR8yNBjsR2HxYSLsisa697uUeMO7byjq.jpg" alt="Д-р Гергана Миланова" itemprop="image">
            </div>
            <div class="col-sm-9 col-9">
                <div class="row">
                    <div class="col-sm-8">
                        <div>
                            <h3 class="text-center" style="color:black">Адвокат Нешо Нешев</h3>
                            <div class="rating rated">
                            </div>
                        </div>
                        <p>Наказателно право</p>
                    </div>
                    <div>
                        <small>Най-ранен час:</small>
                        <span>понеделник в 9:40</span>
                    </div>
                   
                   
                </div>
                 <button type="button" class="btn btn-outline-primary btn-sm">Primary</button>
                 <button class="btn btn-border-d btn-round" type="submit">Submit</button>
            </div>
        </div>
    </RadzenCard>
    @if (!lawyers.Any())
    {

        <RadzenCard class="m-3">
            <h3 class="h5">Не открихме адвокати отговарящи на вашите критерии</h3>

        </RadzenCard>
    }
    @foreach (var lawyer in lawyers)
    {
        <RadzenCard class="m-3">
            <h3 class="h5">Contact</h3>
            <div class="d-flex flex-row">
                <RadzenImage Path="@lawyer.ImgUrl" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                <div>
                    <div>Employee</div>
                    <b>@(lawyer.FirstName + " " + lawyer.LastName)</b>
                    <div class="mt-3">@lawyer.AreaName</div>

                </div>
            </div>
        </RadzenCard>
    }
    <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="count" PageSize="@pageSize" PageNumbersCount="5" PageChanged="@PageChanged" />
</div>
<style>
    .btn-border-d {
        background: transparent;
        border: 1px solid #111111;
        color: #111;
    }

    .btn.btn-border-d:hover,
    .btn.btn-border-d:focus {
        background: #111111;
        color: #fff;
    }

    .btn.btn-round {
        border-radius: 2px;
    }
</style>
@*<style>
    .btn:focus {
    background-color: #ff6e40;
    }
    </style>*@
@* <button type="button" class="btn btn-primary">Language.T39</button>
    <button type="button" class="btn btn-primary">Language.T40</button>*@

@code {
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 6;
    int count;
    [Parameter]
    public string SearchByTown { get; set; } = string.Empty;

    [Parameter]
    public string SearchByArea { get; set; } = string.Empty;

    string name;
    string areaId;
    private IEnumerable<TownViewModel> towns;
    private IEnumerable<LawyerListItem> lawyers;
    private IEnumerable<AreasOfActivityViewModel> areas;
    protected override async Task OnInitializedAsync()
    {
        this.areas = this.areaService.GetAll<AreasOfActivityViewModel>();
        this.towns = this.townService.GetAll<TownViewModel>();
        await base.OnInitializedAsync();
        lawyers = this.searchService.Search(name, SearchByTown, SearchByArea).Result;
    }
    void OnChangeArea(object value, string name)
    {
        var area = areas.FirstOrDefault(a => a.Name == value?.ToString());
        lawyers = this.searchService.SearchAllLawyersByArea(area.Id);
    }
    void OnChange(object value, string name)
    {

        var town = towns.FirstOrDefault(t => t.Name == value?.ToString());
        lawyers = this.searchService.SearchAllLawyersByTown<LawyerListItem>(town.Id);
        //this.NavigationManager.NavigateTo($"lawyers/{town?.Id}");

    }
    void PageChanged(PagerEventArgs args)
    {
        lawyers = GetOrders(args.Skip, args.Top);
    }
    IEnumerable<LawyerListItem> GetOrders(int skip, int take)
    {
        return lawyers.Skip(skip).Take(take).ToList();
    }
}

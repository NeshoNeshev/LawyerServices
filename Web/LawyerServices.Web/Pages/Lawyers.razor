@page "/lawyers"
@page "/lawyers/{SearchByTown}"
@page "/lawyers/{SearchByTown}/{SearchByArea}"

@using LawyerServices.Common.AministrationViewModels
@using LawyerServices.Common.AreasOfActivityViewModels
@using LawyerServices.Common.LawyerViewModels
@using LawyerServices.Services.Data
@using LawyerServices.Services.Data.AdminServices.AreasOfActivityServices

@inject ITownService townService
@inject IAreasOfActivityService areaService
@inject ISearchService searchService

<div class="container containershadow marg">
    <div class="row ">
        <RadzenCard>
            <h1 class="text-center">Адвокати</h1>
            <div class="row">
                <div class="col">
                    <RadzenDropDown AllowClear="false" TValue="string" Placeholder="@SearchByTown" Class="w-100"
                                    Data=@(towns.Select(c => c.Name).Distinct())
                                    Change=@(args => OnChange(args, "DropDown")) />
                </div>
                <div class="col">
                    <RadzenDropDown AllowClear="false" TValue="string" Placeholder="@SearchByArea" Class="w-100"
                                    Data=@(areas.Select(c => c.Name).Distinct())
                                    Change=@(args => OnChangeArea(args, "DropDown")) />
                    @*<RadzenDropDownDataGrid TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="@SearchByArea" AllowFiltering="true" AllowClear="true"
                        Data=@(areas.Select(c => c.Name).Distinct().AsQueryable())
                        Change=@(args => OnChangeArea(args, "DropDownDataGrid")) Class="w-100" />*@
                </div>

            </div>
        </RadzenCard>
    </div>

    <div>
        @if (!lawyers.Any())
        {

            <RadzenCard class="m-3">
                <h3 class="h5">Не открихме адвокати отговарящи на вашите критерии</h3>

            </RadzenCard>
        }
        @foreach (var lawyer in lawyers)
        {
            <RadzenCard class="m-3">
                <h3 class="h5">Адвокат @lawyer.Names</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="https://superdoc.bg/photos/doctors/small/WUVdW6ArIR8yNBjsR2HxYSLsisa697uUeMO7byjq.jpg" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                        <div>Employee</div>
                        <b>@(lawyer.Names)</b>
                        @*<div class="mt-3">@lawyer.AreasCompanies.Select(x=>x.AreasOfActivity.Name)</div>*@
                        @foreach (var item in lawyer.AreasCompanies)
                        {
                            <p>@item.AreasOfActivity.Name</p>
                        }
                    </div>
                </div>
            </RadzenCard>
        }
    </div>

</div>
<style>
    .marg {
        margin-top: 80px;
        margin-bottom: 120px;
    }

    .containershadow {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

    }

    .shading {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
        background-color: #00BFFF;
    }
</style>

@code {


    [Parameter]
    public string SearchByTown { get; set; } = string.Empty;

    [Parameter]
    public string SearchByArea { get; set; } = string.Empty;

    string name;
    //string area;
    //string town;
    private IEnumerable<TownViewModel> towns;
    private IEnumerable<LawyerListItem> lawyers;
    private IEnumerable<AreasOfActivityViewModel> areas;
    protected override async Task OnInitializedAsync()
    {
        this.areas = this.areaService.GetAll<AreasOfActivityViewModel>();
        this.towns = this.townService.GetAll<TownViewModel>();
        var exist = towns.Any(t => t.Name == SearchByTown);
        if (!exist)
        {
            SearchByArea = SearchByTown;
            SearchByTown = string.Empty;
        }
        await base.OnInitializedAsync();
        lawyers = this.searchService.Search(name, SearchByTown, SearchByArea).Result;
    }

    void OnChangeArea(object value, string name)
    {
        SearchByArea = value.ToString();
        var area = areas.FirstOrDefault(a => a.Name == value?.ToString());
        //lawyers = this.searchService.SearchAllLawyersByArea(area.Id);
        lawyers = this.searchService.Search(name, SearchByTown, SearchByArea).Result;
    }
    void OnChange(object value, string name)
    {
        SearchByTown = value.ToString();
        //search by area town
        var town = towns.FirstOrDefault(t => t.Name == value?.ToString());
        //lawyers = this.searchService.SearchAllLawyersByTown<LawyerListItem>(town.Id);
        //this.NavigationManager.NavigateTo($"lawyers/{town?.Id}");
        lawyers = this.searchService.Search(name, SearchByTown, SearchByArea).Result;
    }

}

@page "/notary-appointments"

@layout Shared.AdministrationLayout

@using LaweyrServices.Web.Shared.WorkingTimeModels
@inject HttpClient Http
@*@inject NorthwindService service*@


<AuthorizeView Roles="Notary">
    <Authorized>
        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12 col-lg-12 col-xl-12">
                        @if (wtexceptions == null)
                        {
                            <p>loading</p>
                        }
                        else if (!wtexceptions.Any())
                        {
                            <RadzenCard class="m-3 shadow">
                                <div class="box search-results-not-found">
                                    <div class="row">
                                        <div class="col-sm-12 col-xl-6 col-md-6 text-center">
                                            <div class="icon-circle gray medium">
                                                <i class="fa fa-calendar"></i>
                                            </div>
                                        </div>
                                        <div class="col-sm-12 col-xl-6 col-md-6">
                                            <h4>Все още нямате добавени клинти</h4>
                                            <p class="text-muted">Използвайте календара за да добавите клиенти и да организирате работата на офиса.</p>
                                        </div>
                                    </div>
                                </div>
                            </RadzenCard>
                        }
                        else
                        {
                            <RadzenDataGrid AllowFiltering="true"
                                        FilterMode="FilterMode.Simple" PageSize="3" AllowPaging="true" AllowSorting="true" Data="@wtexceptions" TItem="WorkingTimeExceptionBookingModel" ColumnWidth="150px"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>

                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="FirstName" Title="Имена" />
                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Context="Email" Property="Email" Title="Имейл">
                                        <Template Context="data">
                                            <a href="mailto:@data.Email">@data.Email</a>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Context="PhoneNumber" Property="PhoneNumber" Title="Телефон">
                                        <Template Context="data">
                                            <a href="tel:@data.PhoneNumber">@data.PhoneNumber</a>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="AppointmentType" Title="Услуга"></RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="StarFrom" Filterable="false" Title="Време" FormatString="{0:d/M/yyyy HH:mm}" />
                                    <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="MoreInformation" Title="Допълнителна Информация" />

                                </Columns>
                            </RadzenDataGrid>

                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Profile");
        }
    </NotAuthorized>
</AuthorizeView>
<style>
     .search-results-not-found {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        align-items: center;
    }

    .icon-circle {
        font-size: 4.5em;
        width: 150px;
        height: 150px;
        line-height: 150px;
        margin: 0 auto 30px;
        text-align: center;
        color: #fff;
        border-radius: 50%;
        background: #4bd964;
    }

    .search-results-not-found .icon-circle {
        flex-shrink: 0;
    }

    .icon-circle.medium {
        font-size: 3em;
        width: 100px;
        height: 100px;
        line-height: 100px;
    }

    .icon-circle.gray {
        color: #718096;
        background: #edf2f7;
    }
</style>
@code {

    List<WorkingTimeExceptionBookingModel>? wtexceptions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //var response = Http.GetAsync("Lawyer/DeleteWorkingTimeExceptionWhenDateIsOver");
        wtexceptions = await Http.GetFromJsonAsync<List<WorkingTimeExceptionBookingModel>>("Appointment/GetAllNotaryRequsts");
    }
}

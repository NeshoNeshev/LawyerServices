@page "/moderate-appointments/{lawyerName}/{lawyerId}"

<PageTitle>Срещи и Заседания</PageTitle>

@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.WorkingTimeModels
@using LawyerServices.Common
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@layout Shared.AdministrationLayout
@inject HttpClient Http
<AuthorizeView Roles="Moderator">
    <Authorized>

        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 col-lg-12 col-xl-12">

                    <div class="row">
                        <div class="card">
                            <div class="card-body">

                                <div class="row form-row">
                                    <div class="col-md-12">
                                        <h4 class="card-title text-center"> <p>Модул за управление на срещи на  @LawyerName</p></h4>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    @if (wtexceptions == null)
                    {
                        <Spiner></Spiner>
                    }
                    else if (!wtexceptions.Any())
                    {
                        <RadzenCard>
                            <p class="text-center">Нямате насрочени срещи</p>
                        </RadzenCard>
                    }
                    else
                    {
                        <RadzenDataGrid AllowFiltering="true"
                                    FilterMode="FilterMode.Simple" PageSize="3" AllowPaging="true" AllowSorting="true" Data="@wtexceptions.OrderByDescending(x=>x.StarFrom)" TItem="WorkingTimeExceptionBookingModel" ColumnWidth="150px"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <Columns>

                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="FirstName" Title="Име" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="LastName" Title="Фамилия" Width="150px" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Context="PhoneNumber" Property="PhoneNumber" Title="Телефон">
                                    <Template Context="data">
                                        <a href="tel:@data.PhoneNumber">@data.PhoneNumber</a>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="StarFrom" Title="Начало" Filterable="false" FormatString="{0:d/MM/yyyy HH:mm}" />

                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Context="Email" Property="Email" Title="Имейл">
                                    <Template Context="data">
                                        <a href="mailto:@data.Email">@data.Email</a>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Property="MoreInformation" Title="Информация" />
                               <RadzenDataGridColumn TItem="WorkingTimeExceptionBookingModel" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px" Title="Действие">
                                    <Template Context="IsApproved">
                                        @if (IsApproved.IsApproved == true)
                                        {

                                            TimeSpan span = DateTime.Now.ToLocalTime().Subtract(IsApproved.StarFrom);
                                            if (span.Minutes < 0)
                                            {
                                                <a href="" @onclick="() => CurrentModal.Open(IsApproved.Id, LawyerId)" class="btn btn-sm bg-danger-light" @onclick:preventDefault>
                                                    <i class="far fa-edit"></i> Откажи
                                                </a>
                                            }
                                            else
                                            {
                                                @if (IsApproved.NotShowUp == false)
                                                {
                                                    <a href="" @onclick="() => ShureModal.Open(IsApproved.Id)" class="btn btn-sm bg-danger-light" @onclick:preventDefault>
                                                        <i class="far fa-edit"></i> Неявил се
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-pill bg-danger inv-badge">Неявил се</span>
                                                }
                                            }
                                        }
                                        else if (IsApproved.AppointmentType == GlobalConstants.AnotherConsultation)
                                        {
                                             TimeSpan span = DateTime.Now.ToLocalTime().Subtract(IsApproved.StarFrom);
                                            if (span.Minutes < 0)
                                            {
                                                <a href="" @onclick="() => CurrentModal.Open(IsApproved.Id, LawyerId)" class="btn btn-sm bg-danger-light" @onclick:preventDefault>
                                                    <i class="far fa-edit"></i> Откажи
                                                </a>
                                            }
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 col-lg-12 col-xl-12">
                    <div>
                        <h4 class="text-center" style="margin-bottom:10px; margin-top:10px;">Заседания</h4>
                    </div>
                    @if (meetingModel == null)
                    {
                        <Spiner></Spiner>
                    }
                    else if (!meetingModel.Any())
                    {
                        <RadzenCard>
                            <p class="text-center">Нямате насрочени заседания.</p>
                            <p class="text-center">Използвайте календара за да добавите заседания в графика си.</p>
                        </RadzenCard>

                    }
                    else
                    {
                        <RadzenDataGrid AllowFiltering="true"
                                    FilterMode="FilterMode.Simple" PageSize="3" AllowPaging="true" AllowSorting="true" Data="@meetingModel" TItem="WorkingTimeExceptionMeetingViewModel" ColumnWidth="150px"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="Court" Title="Съд" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="TypeOfCase" Title="Вид" Width="150px" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="CaseNumber" Title="Номер   " />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="StarFrom" Filterable="false" Title="Дата" FormatString="{0:d/MM/yyyy HH:mm}" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="SideCase" Title="Страна" />
                                <RadzenDataGridColumn TItem="WorkingTimeExceptionMeetingViewModel" Property="MoreInformation" Title="Информация" />
                            </Columns>
                        </RadzenDataGrid>
                    }
                </div>
            </div>
        </div>
        <CancelAppointmentByModerator @ref="CurrentModal" OnDoneCallback="OnSure"></CancelAppointmentByModerator>
        <SureStopCompanyModal @ref="ShureModal" OnDoneCallback="OnClickNotShowUp"></SureStopCompanyModal>
    </Authorized>
    <NotAuthorized>
        @{
            navigationManager.NavigateTo("/notfound");
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    private SureStopCompanyModal ShureModal { get; set; }
    private CancelAppointmentByModerator CurrentModal { get; set; }
    List<WorkingTimeExceptionBookingModel>? wtexceptions;
    IEnumerable<WorkingTimeExceptionMeetingViewModel>? meetingModel;
    [Parameter]
    public bool Aproved { get; set; } = false;

    [Parameter]
    public string? LawyerName { get; set; }

    [Parameter]
    public string? LawyerId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

       
        wtexceptions = await Http.GetFromJsonAsync<List<WorkingTimeExceptionBookingModel>>($"Appointment/GetAllRequstsByLawyerId?lawyerId={LawyerId}");
        meetingModel = await Http.GetFromJsonAsync<IEnumerable<WorkingTimeExceptionMeetingViewModel>>($"Appointment/GetAllMeetingByLawyerId?lawyerId={LawyerId}");

    }
    async void OnClick(string Id)
    {
        var approvedResponse = await Http.PutAsJsonAsync("Appointment/PostApproved", Id);

        if (approvedResponse.IsSuccessStatusCode)
        {
            var wte = wtexceptions.FirstOrDefault(x => x.Id == Id);
            this.wtexceptions.Remove(wte);
            wte.IsApproved = true;
            this.wtexceptions.Add(wte);
            StateHasChanged();
        }
    }
    private async Task OnClickNotShowUp(string id)
    {
        var response = await Http.PutAsJsonAsync("Appointment/PostNotShowUp", id);
        if (response.IsSuccessStatusCode)
        {
            var wte = wtexceptions.FirstOrDefault(x => x.Id == id);
            this.wtexceptions.Remove(wte);
            wte.NotShowUp = true;
            this.wtexceptions.Add(wte);
            StateHasChanged();
        }
    }
    private async Task OnSure(CancelCurrentWteInputModel model)
    {
        var wte = wtexceptions.Where(x => x.Id == model.WteId).FirstOrDefault();
        if (wte != null)
        {
            wtexceptions.Remove(wte);
            StateHasChanged();
        }
    }
}

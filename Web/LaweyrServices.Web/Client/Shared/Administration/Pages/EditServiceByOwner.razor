@page "/editservicebyowner/{LawyerName}/{LawyerId}"
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.FixedCostModels
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager navigationManager
@inject HttpClient Http

@layout Shared.AdministrationLayout
<AuthorizeView Roles="Moderator" Context="authContext">
    <Authorized>
        <div class="content">
            <div class="container-fluid">
                <div class="col-md-8 col-lg-9 col-xl-12">

                    <div class="row">
                        <div class="col-sm-12">
                            <div class="card">
                                <div class="card-body">
                                    <h4 class="card-title text-center">Услуги които се предлагат от @LawyerName</h4>
                                    <div class="profile-box">
                                        <div class="row">
                                            @if (featuresModel == null)
                                            {
                                               <Spiner></Spiner>
                                            }
                                            else
                                            {
                                                <div class="col-md-6 col-lg-4 col-xl-4">
                                                    <div class="card marg shadow">
                                                        <div class="card-body">
                                                            <div class="form-check">                                              
                                                                <div>
                                                                    <label class="custom_check">
                                                                        <input type="checkbox"  checked="@featuresModel.FreeFirstAppointment" @onchange="FreeFirstAppoitmentCheck">
                                                                        <span class="checkmark"></span> Безплатна първа консултация
                                                                    </label>
                                                                </div>                                                              
                                                            </div>
                                                            <hr />
                                                            <h6>Избирайки това поле информирате, че първата ви консултация е безплатна !</h6>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6 col-lg-4 col-xl-4">
                                                    <div class="card marg shadow">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <div>
                                                                    <label class="custom_check">
                                                                        <input type="checkbox"  checked="@featuresModel.NoWinNoFee" @onchange="NoWinNoFeeCheck">
                                                                        <span class="checkmark"></span> Без победа, без такса
                                                                    </label>
                                                                </div>                                                             
                                                            </div>
                                                            <hr />
                                                            <h6>Избирайки това поле информирате, че ако не спечелите делото клиента не ви дължи нищо !</h6>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6 col-lg-4 col-xl-4">
                                                    <div class="card marg shadow">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                 <div>
                                                                    <label class="custom_check">
                                                                        <input type="checkbox"  checked="@featuresModel.FixedCost" @onchange="FixedCostCheck">
                                                                        <span class="checkmark"></span> Услуги с фиксирана цена
                                                                    </label>
                                                                </div>                                                              
                                                            </div>
                                                            <hr />
                                                            <h6>Избирайки това поле информирате, че предлагате някои услуги с фиксирана цена ! <span class="text-danger">*</span></h6>
                                                        </div>
                                                    </div>
                                                </div>
                                                @*<div class="col-sm-3 ">
                                                    <div class="card marg shadow">
                                                        <div class="card-body">
                                                            <div class="form-check">
                                                                <div>
                                                                    <label class="custom_check">
                                                                        <input type="checkbox"  checked="@featuresModel.MeetingClientLocation" @onchange="MeetingClientLocationCheck">
                                                                        <span class="checkmark"></span> Посещение при клиента
                                                                    </label>
                                                                </div>                                                            
                                                            </div>
                                                            <hr />
                                                            <h6>Избирайки това поле информирате, че предлагате посещение на място избрано от клиента !</h6>
                                                        </div>
                                                    </div>
                                                </div>*@
                                            }
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <table class="table table-bordered">
                                                    <thead>
                                                        <tr>

                                                            <th scope="col">Име</th>
                                                            <th scope="col">Цена</th>
                                                            <th scope="col">Промени</th>
                                                            <th scope="col">Изтрий</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @if (fixedCostModel?.Count() != null)
                                                        {
                                                            foreach (var item in fixedCostModel)
                                                            {
                                                                <tr>

                                                                    <td>@item?.Name</td>
                                                                    <td>@item?.Price.ToString()</td>
                                                                    <td> <button type="button" class="btn btn-warning btn-sm" @onclick="() => Modal.Open(item)">Промени</button></td>
                                                                    <td> <button type="button" class="btn btn-danger btn-sm" @onclick="() => OnDelete(item?.Id)">Изтрий</button></td>
                                                                </tr>
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="card widget-profile pat-widget-profile shadow">
                                                    <div class="card-body">
                                                        <div class="login-header">
                                                            <h3 class="text-center">Въведете услуга с фиксирана цена</h3>
                                                        </div>
                                                        @if (model == null)
                                                        {
                                                           <Spiner></Spiner>
                                                        }
                                                        else
                                                        {
                                                            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" class="form-group" enctype="multipart/form-data" Context="formContext">
                                                                <DataAnnotationsValidator />
                                                                <div class="form-group form-focus">
                                                                    <InputText class="form-control floating" id="names" placeholder="Име на услугата" @bind-Value="model.Name" />
                                                                    <ValidationMessage For="@(() => model.Name)" />
                                                                    <label class="focus-label">Име на услугата</label>
                                                                </div>
                                                                <div class="form-group form-focus mt-30">
                                                                    <InputNumber class="form-control" id="number" placeholder="Цена" @bind-Value="model.Price" />
                                                                    <ValidationMessage For="@(() => model.Price)" />
                                                                    <label class="focus-label">Цена</label>
                                                                </div>
                                                                <button type="submit" class="btn btn-primary">Запази</button>
                                                                <button type="button" class="btn btn-secondary" onclick="@OnClear">Изчисти</button>      
                                                            </EditForm>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <ModalFixedPrice @ref="Modal" OnDoneCallback="OnModalDone"></ModalFixedPrice>
    </Authorized>
    <NotAuthorized>
        @{
            navigationManager.NavigateTo("/notfound");
        }
    </NotAuthorized>
</AuthorizeView>
<style>
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .form-control:focus {
        border-color: #0000ff;
        box-shadow: inset 0 1px 1px rgba(0,0,255,1), 0 0 8px rgba(0,0,255,1);
    }

    .required:after {
        content: " *";
        color: red;
    }

</style>
@code {

    [Parameter]
    public string? LawyerId { get; set; }

    [Parameter]
    public string? LawyerName { get; set; }

    private FixedCostInputModel? model;

    private FeaturesInputModel? featuresModel;

    private ModalFixedPrice Modal { get; set; }

    [Parameter]
    public IEnumerable<FixedCostViewModel>? fixedCostModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = new FixedCostInputModel();
        try
        {
            var response = await Http?.GetFromJsonAsync<FixedCostAndFeaturesViewModel>($"EditLawFirmByOwner/ServiceAndFeatures?lawyerId={LawyerId}");

            this.fixedCostModel = response?.fixedCostViewModel;
            this.featuresModel = response?.featuresInputModel;

            await base.OnInitializedAsync();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private void OnModalDone(FixedCostViewModel? FCModel)
    {

        var model = this.fixedCostModel.Where(x => x.Id == FCModel.Id).FirstOrDefault();
        fixedCostModel.ToList().Remove(model);
        fixedCostModel.ToList().Add(FCModel);
    }
    private async Task HandleValidSubmit()
    {
        model.lawyerId = LawyerId;
        var response = await Http.PostAsJsonAsync("EditLawFirmByOwner/PostFixedCost", model);

        if (response.IsSuccessStatusCode)
        {
            var newresponse = await Http?.GetFromJsonAsync<FixedCostAndFeaturesViewModel>($"EditLawFirmByOwner/ServiceAndFeatures?lawyerId={LawyerId}");

            fixedCostModel = newresponse?.fixedCostViewModel;
            model = new FixedCostInputModel();
            StateHasChanged();
        }
    }
    void OnChange(bool? value, string name)
    {
        featuresModel.LawyerId = LawyerId;
        var response = this.Http.PutAsJsonAsync<FeaturesInputModel>("EditLawFirmByOwner/UpdateFeatures", featuresModel);
        StateHasChanged();
    }
    void OnClear()
    {
        model = new FixedCostInputModel();
        StateHasChanged();
    }
    async void OnDelete(string serviceId)
    {
        var response = await Http.DeleteAsync($"Service/DeleteFixedCost?serviceId={serviceId}");
        if (response.IsSuccessStatusCode)
        {
            var responses = await Http?.GetFromJsonAsync<FixedCostAndFeaturesViewModel>($"EditLawFirmByOwner/ServiceAndFeatures?lawyerId={LawyerId}");
            fixedCostModel = responses?.fixedCostViewModel;
            StateHasChanged();
        }

    }
     private async Task MeetingClientLocationCheck(ChangeEventArgs ev)
    {
        featuresModel.LawyerId = LawyerId;
        featuresModel.MeetingClientLocation = (Boolean)ev.Value;
        var response = await this.Http.PutAsJsonAsync<FeaturesInputModel>("EditLawFirmByOwner/UpdateFeatures", featuresModel);
        StateHasChanged();
    }
    private async Task NoWinNoFeeCheck(ChangeEventArgs ev)
    {
        featuresModel.LawyerId = LawyerId;
        featuresModel.NoWinNoFee = (Boolean)ev.Value;
        var response = await this.Http.PutAsJsonAsync<FeaturesInputModel>("EditLawFirmByOwner/UpdateFeatures", featuresModel);
        StateHasChanged();
    }
    private async Task FreeFirstAppoitmentCheck(ChangeEventArgs ev)
    {
        featuresModel.LawyerId = LawyerId;
        featuresModel.FreeFirstAppointment = (Boolean)ev.Value;
        var response = await this.Http.PutAsJsonAsync<FeaturesInputModel>("EditLawFirmByOwner/UpdateFeatures", featuresModel);
        StateHasChanged();
    }
    private async Task FixedCostCheck(ChangeEventArgs ev)
    {
       featuresModel.LawyerId = LawyerId;
        featuresModel.FixedCost = (Boolean)ev.Value;
        var response = await this.Http.PutAsJsonAsync<FeaturesInputModel>("EditLawFirmByOwner/UpdateFeatures", featuresModel);
        StateHasChanged();
    }
}

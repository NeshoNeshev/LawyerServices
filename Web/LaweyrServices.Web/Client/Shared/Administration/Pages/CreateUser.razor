@page "/createuser"

@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@using LawyerServices.Data.Models.Enumerations
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net

@layout Shared.AdministrationLayout

@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient Http

<h3 class="text-center">Administration</h3>
<div class="row mt-2">
    <div class="col-lg-6">
        <div class="row">
            <div class="col text-center">
                <button type="button" @onclick="ClearSelection" class="btn btn-outline-primary">Изчисти</button>
            </div>

        </div>
        @if (lawyerModel == null)
        {
            <Spiner></Spiner>
        }
        else
        {
            <EditForm Model="@lawyerModel" OnValidSubmit="@HandleValidSubmit" class="form-group" enctype="multipart/form-data">
                <DataAnnotationsValidator />

                <div class="form-group form-focus">
                    <InputText class="form-control floating" id="names"  @bind-Value="lawyerModel.Names" />
                    <ValidationMessage For="@(() => lawyerModel.Names)" />
                    <label class="focus-label">Имена</label>
                </div>
                <div class="form-group form-focus">
                    <RadzenDatePicker @bind-Value=@lawyerModel.ExpirationDate Change=@(args => OnChangeDate(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" />
                    <label class="focus-label">Валидност на акаунта</label>
                </div>
                <div class="form-group form-focus">
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                Data=@(townModel?.Select(c => c.Name).Distinct())
                                Change=@(args => OnChange(args, "DropDown")) Placeholder="Изберете град" />
                </div>
                <div class="form-group form-focus">
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                Data=@(languages)
                                Change=@(args => OnAddLanguages(args, "DropDown")) Placeholder="Изберете език" />
                </div>
                @if (!String.IsNullOrWhiteSpace(languagesToAdd))
                {
                    <p>
                        @languagesToAdd <a class="btn btn-sm bg-danger-light" @onclick="@Delete" @onclick:preventDefault href="">
                            <i class="oi oi-trash"></i>
                        </a>
                    </p>
                }
                <div class="form-group form-focus">
                    <InputText class="form-control" id="email"  @bind-Value="lawyerModel.Email" />
                    <ValidationMessage For="@(() => lawyerModel.Email)" />
                    <span class="text-danger">@emailError</span>
                    <label class="focus-label">Имейл</label>
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="phone"  @bind-Value="lawyerModel.PhoneNumber" />
                    <ValidationMessage For="@(() => lawyerModel.PhoneNumber)" />
                    <span class="text-danger">@phoneError</span>
                    <label class="focus-label">Телефон</label>
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="jurisdiction" @bind-Value="lawyerModel.Jurisdiction" />
                    <ValidationMessage For="@(() => lawyerModel.Jurisdiction)" />
                    <label class="focus-label">Юрисдикция</label>
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="jurisdiction"  @bind-Value="lawyerModel.LicenceDate" />
                    <ValidationMessage For="@(() => lawyerModel.LicenceDate)" />
                    <label class="focus-label">Дата на лиценз</label>
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="address"  @bind-Value="lawyerModel.AddressLocation" />
                    <ValidationMessage For="@(() => lawyerModel.AddressLocation)" />
                    <label class="focus-label">Адрес</label>
                </div>
                <div class="form-group form-focus">
                    <InputTextArea class="form-control floating" id="names"  @bind-Value="lawyerModel.HeaderText" />
                    <ValidationMessage For="@(() => lawyerModel.HeaderText)" />
                    <label class="focus-label">Заглавна част</label>
                </div>

                <div class="form-group form-focus mt-30">
                    <InputTextArea class="form-control" id="email" @bind-Value="lawyerModel.AboutText" />
                    <ValidationMessage For="@(() => lawyerModel.AboutText)" />
                    <label class="focus-label">За адвоката</label>
                </div>
               @* <div class="checkbox">
                    <InputCheckbox @bind-Value="lawyerModel.IsOwner" />
                    <ValidationMessage For="@(() => lawyerModel.IsOwner)" />
                    <label class="focus-label">Собственик</label>
                </div>*@
                <div class="checkbox">
                    <InputCheckbox @bind-Value="lawyerModel.PhoneVerification" />
                    <ValidationMessage For="@(() => lawyerModel.PhoneVerification)" />
                    <label class="focus-label">Проведен разговор</label>
                </div>
                <div class="checkbox">
                    <InputCheckbox @bind-Value="lawyerModel.IsPublicPhoneNuber" />
                    <ValidationMessage For="@(() => lawyerModel.IsPublicPhoneNuber)" />
                    <label class="focus-label">Публичен телефон</label>
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-outline-primary">Създай</button>
                </div>
            </EditForm>
        }
        <div class="row">
            <div class="col text-center">
                <button type="button" @onclick="ClearSelection" class="btn btn-outline-primary">Изчисти</button>
            </div>

        </div>
    </div>
</div>




@code {
    private Profession profesion;
    private IEnumerable<TownViewModel>? townModel;
    private CreateLawyerModel? lawyerModel = new CreateLawyerModel();

    string? phoneError;
    string? emailError;
    private List<string>? languages;
    [Parameter]
    public string? languagesToAdd { get; set; } = String.Empty;
    protected override async Task OnInitializedAsync()
    {

        //                #if DEBUG
        //await Task.Delay(10000);
        //#endif
        languages = new List<string>(){
                 "Азерски","Албански","Английски",
                 "Арабски","Арменски","Африкаанс",
                 "Беларуски","Босненски","Български",
                 "Виетнамски","Датски","Есперанто",
                 "Естонски","Грузински","Немски",
                 "Гръцки","Зулуски","Иврит",
                 "Хинди","Исландски","Индонезийски",
                 "Ирландски","Испански","Италиански",
                 "Казахски","Каталонски","Кечуа",
                 "Китайски","Корейски","Корсикански",
                 "Кюрдски","Латински","Латвийски",
                 "Литовски","Люксембургски","Македонски",
                 "Малайски","Малтийски","Монголски",
                 "Норвежки","Персийски","Полски",
                 "Португалски","Пущунски","Румънски",
                 "Руски","Сръбски","Словашки",
                 "Словенски","Суахили","Таджикски",
                 "Татарски","Тайландски","Турски",
                 "Тюркменски","Уелски","Узбекски",
                 "Украински","Унгарски","Урду",
                 "Фарси","Фарьорски","Финландски",
                 "Френски","Холандски","Хърватски",
                  "Чешки","Шведски","Японски",
            };
        this.townModel = await Http.GetFromJsonAsync<IEnumerable<TownViewModel>>("Administrator/GetTowns");
        lawyerModel.Languages = new List<string>();

    }


    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }
    void OnChange(object value, string name)
    {
        lawyerModel.TownName = value.ToString();

    }
    void OnChangeDate(DateTime? value, string name, string format)
    {

        lawyerModel.ExpirationDate = (DateTime)value;
    }
    private async Task HandleValidSubmit()
    {

        var exist = await Http.PostAsJsonAsync($"Administrator/FindByPhoneAsync", lawyerModel?.PhoneNumber);
        var existEmail = await Http.PostAsJsonAsync($"Administrator/ExistingEmailAsync", lawyerModel?.Email);
        if (!exist.IsSuccessStatusCode)
        {
            phoneError = "Съществува потребител с този телефон";
            return;
        }
        else if (!existEmail.IsSuccessStatusCode)
        {
            emailError = "Съществува потребител с този email";
            return;
        }
        else
        {
            lawyerModel.Role = Profession.Lawyer;
            var response = await Http.PostAsJsonAsync<CreateLawyerModel>("Administrator/CreateUser", lawyerModel);
            if (response.IsSuccessStatusCode)
            {
                phoneError = null;
                emailError = null;
                NavigationManager.NavigateTo("/administration");
            }
        }
    }
    void ClearSelection()
    {
        phoneError = null;
        lawyerModel = new CreateLawyerModel();
    }
    void OnAddLanguages(object value, string name)
    {
        lawyerModel.Languages.Add(value.ToString());

        languagesToAdd = languagesToAdd + " " + value.ToString();
        StateHasChanged();

    }
    void Delete()
    {
        languagesToAdd = String.Empty;
        lawyerModel.Languages = new List<string>();
    }


}
@page "/createuser"

@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@using LawyerServices.Data.Models.Enumerations
@using Microsoft.AspNetCore.Authorization


@layout Shared.AdministrationLayout

@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient Http

<h3 class="text-center">Administration</h3>

<div class="row mt-2">
    <div class="row text-center mt-2">
        @if (selectedApproved?.Any() == true)
        {
            <div>
                Избран потребител: @selectedApproved[0].Names
            </div>
        }
    </div>
    <div class="col-lg-12">


        <RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                        AllowSorting="true" Data="@allRequests" TItem="RequestViewModel" ColumnWidth="100px"
                        SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedApproved>
            <Columns>
                @*<RadzenDataGridColumn TItem="Employee" Property="Photo" Title="Employee" Sortable="false" Filterable="false">
                    <Template Context="data">
                    <RadzenImage Path="@data.Photo" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px;" />
                    @data.FirstName @data.LastName
                    </Template>
                    </RadzenDataGridColumn>*@
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Names" Title="Име" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="CreatedOn" Title="Дата" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Profession" Title="Професия" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Town" Title="Град" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Address" Title="Адрес" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Email" Title="Имейл" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="Office" Title="Кантора" />
                <RadzenDataGridColumn TItem="RequestViewModel" Property="PhoneNumber" Title="Телефон" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
<div class="row mt-2">
    <div class="col-lg-6">
        <div class="row">
            <div class="col text-center">
                <button type="button" @onclick="ClearSelection" class="btn btn-outline-primary">Изчисти</button>
            </div>
            <div class="col text-center">
                <button type="button" @onclick="Map" class="btn btn-outline-primary">Копирай</button>
            </div>

        </div>
        @if (lawyerModel == null)
        {
            <div>loading</div>
        }
        else
        {
            <!-- Register Form -->
            <EditForm Model="@lawyerModel" OnValidSubmit="@OnSubmit" class="form-group" enctype="multipart/form-data">
                <DataAnnotationsValidator />

                <div class="form-group form-focus">
                    <InputText class="form-control floating" id="names" placeholder="Вашите имена" @bind-Value="lawyerModel.Names" />
                    <ValidationMessage For="@(() => lawyerModel.Names)" />
                    <label class="focus-label">Имена</label>
                </div>
                <div class="form-group form-focus">
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                Data=@(townModel?.Select(c => c.Name).Distinct())
                                Change=@(args => OnChange(args, "DropDown")) Placeholder="Изберете град" />
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="email" placeholder="Имейл" @bind-Value="lawyerModel.Email" />
                    <ValidationMessage For="@(() => lawyerModel.Email)" />
                    <label class="focus-label">Имейл</label>
                </div>
                <div class="form-group form-focus">
                    <InputText class="form-control" id="phone" placeholder="Телефон" @bind-Value="lawyerModel.PhoneNumber" />
                    <ValidationMessage For="@(() => lawyerModel.PhoneNumber)" />
                    <label class="focus-label">Телефон</label>
                </div>
                <div class="form-group form-focus">
                    <InputSelect @bind-Value="lawyerModel.Role">
                        @foreach (Enum item in Enum.GetValues(typeof(Profession)))
                        {
                        <option value="@item">@item.ToString()</option>
                        }
                </InputSelect>
                <label class="focus-label">Роля</label>
            </div>
            <div class="form-group form-focus">
                <InputText class="form-control" id="office" placeholder="Кантора" @bind-Value="lawyerModel.OfficeName" />
                <ValidationMessage For="@(() => lawyerModel.OfficeName)" />
                <label class="focus-label">Кантора</label>
            </div>
            <div class="form-group form-focus">
                <InputText class="form-control" id="address" placeholder="Адрес" @bind-Value="lawyerModel.AddressLocation" />
                <ValidationMessage For="@(() => lawyerModel.AddressLocation)" />
                <label class="focus-label">Адрес</label>
            </div>
            <div class="checkbox">
                <InputCheckbox @bind-Value="lawyerModel.PhoneVerification" />
                <ValidationMessage For="@(() => lawyerModel.PhoneVerification)" />
                <label class="focus-label">AcceptedTermOfUse</label>
            </div>
            @*<div class="text-right">
                <a class="forgot-link" href="login.html">Already have an account?</a>
                </div>*@
            @*<button class="btn btn-primary btn-lg" type="submit">Signup</button>*@
            <div class="text-center">
                <button class="btn btn-border-d btn-round btn-block" type="submit">Submit</button>
            </div>
        </EditForm>
            <!-- /Register Form -->
        }


    </div>
</div>




@code {
    private List<RequestViewModel>? allRequests;
    private Profession profesion;
    private IEnumerable<TownViewModel>? townModel;
    IList<RequestViewModel>? selectedApproved;
    private CreateLawyerModel? lawyerModel = new CreateLawyerModel();
    int value;
    bool popup;
    RadzenDataGrid<RequestViewModel>? ordersGrid;
    string? phone;
    protected override async Task OnInitializedAsync()
    {

        //                #if DEBUG
        //    await Task.Delay(10000);
        //#endif
        this.allRequests = await Http.GetFromJsonAsync<List<RequestViewModel>>("Administrator/GetAllRequests");
        this.townModel = await Http.GetFromJsonAsync<IEnumerable<TownViewModel>>("Administrator/GetTowns");

        this.selectedApproved = this.allRequests.Take(1).ToList();
    }

    private void Map()
    {
        if (selectedApproved?.Any() == true)
        {
            var newModel = new CreateLawyerModel()
                {
                    Names = selectedApproved[0].Names,
                    TownName = selectedApproved[0].Town,
                    AddressLocation = selectedApproved[0].Address,
                    OfficeName = selectedApproved[0].Office,
                    PhoneNumber = selectedApproved[0].PhoneNumber,
                    Email = selectedApproved[0].Email,
                    RequestId = selectedApproved[0].Id,
                };
            this.lawyerModel = newModel;
        }
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }
    void OnChange(object value, string name)
    {
        lawyerModel.TownName = value.ToString();

    }
    private async Task OnSubmit()
    {

        var response = await Http.PostAsJsonAsync("Administrator/CreateUser", lawyerModel);
        var exist = this.allRequests.FirstOrDefault(x => x.PhoneNumber == lawyerModel.PhoneNumber);
        if (exist == null)
        {
            return;
        }
        allRequests.Remove(selectedApproved[0]);
        await ordersGrid.Reload();
        //test

        //await this.requestService.SetIsApproved(exist.Id);

    }
    void ClearSelection()
    {
        selectedApproved = null;
        lawyerModel = new CreateLawyerModel();
    }
}
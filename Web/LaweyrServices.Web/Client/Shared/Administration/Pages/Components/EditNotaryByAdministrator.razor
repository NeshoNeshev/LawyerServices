@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@inject HttpClient Http
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center">Нотариус @Model?.Names</h5>

            </div>
            <div class="modal-body">
                @if (inputModel == null)
                {
                   <Spiner></Spiner>
                }
                else
                {
                    <EditForm Model="@inputModel" class="form-group" enctype="multipart/form-data" Context="formContext">
                        <DataAnnotationsValidator />

                        <div class="form-group form-focus">
                            <InputText class="form-control floating" id="names" @bind-Value="inputModel.Names" />
                            <ValidationMessage For="@(() => inputModel.Names)" />
                            <label class="focus-label">Име</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control floating" id="address" @bind-Value="inputModel.AddressLocation" />
                            <ValidationMessage For="@(() => inputModel.AddressLocation)" />
                            <label class="focus-label">адрес</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control floating" id="officename" @bind-Value="inputModel.OfficeName" />
                            <ValidationMessage For="@(() => inputModel.OfficeName)" />
                            <label class="focus-label">офис</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control floating" id="website" @bind-Value="inputModel.WebSite" />
                            <ValidationMessage For="@(() => inputModel.WebSite)" />
                            <label class="focus-label">Уеб сайт</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="email" placeholder="офис имейли" @bind-Value="inputModel.OfficeEmails" />
                            <ValidationMessage For="@(() => inputModel.OfficeEmails)" />
                            <label class="focus-label">Офис имейли</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="phone" placeholder="офис телефони" @bind-Value="inputModel.OfficeNumbers" />
                            <ValidationMessage For="@(() => inputModel.OfficeNumbers)" />
                            <label class="focus-label">Офис телефони</label>
                        </div>
                        <div class="checkbox">
                            <InputCheckbox @bind-Value="inputModel.WorkInSaturday" />
                            <ValidationMessage For="@(() => inputModel.WorkInSaturday)" />
                            <label class="focus-label">Работи в събота</label>
                        </div>
                        <div class="checkbox">
                            <InputCheckbox @bind-Value="inputModel.WorkInSunday" />
                            <ValidationMessage For="@(() => inputModel.WorkInSunday)" />
                            <label class="focus-label">Работи в неделя</label>
                        </div>
                        <div class="form-group form-focus mt-30">
                            <InputTextArea class="form-control" id="about" @bind-Value="inputModel.About" rows="10" />
                            <ValidationMessage For="@(() => inputModel.About)" />
                            <label class="focus-label">Зa нотариус</label>
                        </div>
                        <div class="form-group form-focus">
                            <RadzenDatePicker @bind-Value=@inputModel.ExpirationDate Change=@(args => OnChangeDate(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" />
                            <label class="focus-label">Валидност на акаунта</label>
                        </div>

                    </EditForm>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="@Save">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>



@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public AllNotaryAdministrationViewModel? Model { get; set; }

    private EditNotaryModel? inputModel;
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    [Parameter]
    public EventCallback<AllNotaryAdministrationViewModel> OnDoneCallback { get; set; }


    public void Open(AllNotaryAdministrationViewModel model)
    {

        inputModel = new EditNotaryModel();
        inputModel.AddressLocation = model.Address;
        inputModel.About = model.AboutText;
        inputModel.Names = model.Names;
        inputModel.WebSite = model.WebSite;
        inputModel.OfficeName = model.OfficeName;
        inputModel.WorkInSaturday = model.WorkInSaturday;
        inputModel.WorkInSunday = model.WorkInSunday;
        inputModel.OfficeEmails = model.OfficeEmails;
        inputModel.OfficeNumbers = model.PhoneNumbers;
        inputModel.ExpirationDate = model.ExpirationDate;
        //inputModel.Names = model.Names;
        //inputModel.Address = model.Address;
        inputModel.Id = model.Id;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        Model = model;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    private async Task Save()
    {
        //       #if DEBUG
        //  await Task.Delay(10000);
        //#endif
        var response = await this.Http.PutAsJsonAsync($"Administrator/EditNotary", inputModel);
        if (response.IsSuccessStatusCode)
        {
            Model.Id = inputModel.Id;
            Model.AboutText = inputModel.About;
            await InvokeAsync(() => OnDoneCallback.InvokeAsync(Model));
            StateHasChanged();
            Close();
        }

    }

       void OnChangeDate(DateTime? value, string name, string format)
    {
       
        inputModel.ExpirationDate = (DateTime)value;
    }
}
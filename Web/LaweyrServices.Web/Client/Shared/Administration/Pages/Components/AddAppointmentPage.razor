@using LaweyrServices.Web.Shared.DateModels
@using LawyerServices.Common

@inject HttpClient Http
@inject DialogService DialogService

<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    @if(model.Text != GlobalConstants.Meeting)
    {
        <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="CheckBox" />
        </div>
        <div class="col">
            <RadzenCheckBox @bind-Value=@IsChecked Name="IsChecked" TValue="bool" Change=@(args => OnClickChecked(args, "CheckBox1 CheckBox")) />
            <RadzenLabel Text="IsChecked" Component="IsChecked" Style="margin-left: 8px; vertical-align: middle;" />
        </div>

    </div>
    }
    
    @if (IsChecked)
    {
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Text" />
            </div>
            <div class="col">
                <RadzenDatePicker @bind-Value=@value DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Диапазон" />
            </div>
            <div class="col">
                <RadzenDropDown AllowClear="true" TValue="int" Class="w-100"
                            Data=@(steps.Distinct())
                            Change=@(args => OnChangeStep(args, "DropDown")) />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Начален час" />
            </div>
            <div class="col">
                <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH" Change=@(args => OnChangeStartHour(args, "Time-only DatePicker", "HH:mm")) Class="w-100" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Краен час" />
            </div>
            <div class="col">
                <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH" Change=@(args => OnChangeEndHour(args, "Time-only DatePicker", "HH:mm")) Class="w-100" />
            </div>
        </div>
    }
    else if (model.Text == GlobalConstants.Meeting)
    {
         <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Start" />
            </div>
            <div class="col">
                <RadzenDatePicker ShowSeconds="false" @bind-Value="@model.Start" Name="Start" ShowTime="true" />
                <RadzenRequiredValidator Text="Start is required" Component="Start" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Дело номер" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.CaseNumber" Name="CaseNumber" />
                <RadzenLengthValidator Max="10" Text="Максимум 10 символа" Component="CaseNumber" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Съд" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.Court" Name="Court" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="Court" />
            </div>
        </div>
         <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Страна по делото" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.SideCase" Name="SideCase" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="SideCase" />
            </div>
        </div>
         <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Вид на делото" />
            </div>
            <div class="col">
                @*<RadzenTextBox @bind-Value="@model.TypeOfCase" Name="TypeOfCase" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="TypeOfCase" />*@
                 <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                             Placeholder="@model?.TypeOfCase" Data=@typOfCase TextProperty="TypOfCase" ValueProperty="TypOfCase" Change=@(args => OnChangeCase(args, "DropDown with placeholder")) />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Допълнителна информация" />
            </div>
            <div class="col">
                <RadzenTextArea @bind-Value="@model.MoreInformation" Name="MoreInformation" />
                <RadzenLengthValidator Max="200" Text="Максимум 200 символа" Component="MoreInformation" Style="col=" 40" />
            </div>
        </div>

    }
    else
    {
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Text" />
            </div>
            <div class="col">
                <RadzenDropDown Data="@appointments" @bind-Value="@model.Text" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Start" />
            </div>
            <div class="col">
                <RadzenDatePicker ShowSeconds="false" @bind-Value="@model.Start" Name="Start" ShowTime="true" />
                <RadzenRequiredValidator Text="Start is required" Component="Start" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="End" />
            </div>
            <div class="col">
                <RadzenDatePicker Name="End" ShowSeconds="false" @bind-Value="@model.End" ShowTime="true" />
                <RadzenRequiredValidator Component="End" Text="End is required" />
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Style="background-color:blue" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    //change to strat date

    DateTime? value = DateTime.Now;

    int step;
    TimeSpan start;
    TimeSpan end;
    DateTime date;

    private List<int> steps;
    IList<AppointmentViewModel>? appointmentsByDate;
    Appointment model = new Appointment();

    List<string> appointments = new List<string>() { GlobalConstants.Client, GlobalConstants.Meeting};

    IEnumerable<string> typOfCase = new List<string>()
    {
        "ГД","ВГД","ТрД", "ВТрД", "НОХД", "ВНОХД", "ЧНД", "ВЧНД", "АНД","ВАНД", "АД", "ВАД", "КД","ВКС","ТД"
    };

    bool IsChecked;
    protected override async Task OnInitializedAsync()
    {
        //                 #if DEBUG
        //    await Task.Delay(10000);
        //#endif
        appointmentsByDate = new List<AppointmentViewModel>();

        steps = new List<int>() { 30, 60 };
        model.Text = appointments.First();
        value = this.Start;
        End = Start;
        appointmentsByDate = await this.Http.GetFromJsonAsync<IList<AppointmentViewModel>>($"Scheduler/GetAllAppointmentsByCurrentDate?date={Start.ToString("yyyy-MM-dd HH:mm:ss")}");
    }
    void OnClickChecked(bool? value, string name)
    {
        IsChecked = value.Value;
    }
    protected override void OnParametersSet()
    {

        model.Start = Start;
        model.End = End;
    }

    void OnSubmit(Appointment model)
    {

        if (!IsChecked && model.Text == GlobalConstants.Client)
        {

            if (model.Start >= model.End)
            {
                return;
            }
        }
        if ( model.Text == GlobalConstants.Meeting)
        {
            model.End = model.Start.Value.AddHours(1);
        }
       
        model.Start = model.Start;
        model.End = model.End;
        model.EndtDiapazone = end;
        model.StartDiapazone = start;
        model.Date = Start;
        model.Step = step;
        model.IsChecked = IsChecked;
        DialogService.Close(model);
    }
    void OnChange(DateTime? value, string name, string format)
    {
        value = value.Value;
    }
    void OnChangeStep(dynamic value, string name)
    {
        step = value;
    }
    void OnChangeStartHour(DateTime? value, string name, string format)
    {
        start = value.Value.TimeOfDay;

    }
    void OnChangeEndHour(DateTime? value, string name, string format)
    {
        end = value.Value.TimeOfDay;
    }
    void OnChangeCase(object value, string name)
    {
        model.TypeOfCase = value.ToString();
        
    }

}
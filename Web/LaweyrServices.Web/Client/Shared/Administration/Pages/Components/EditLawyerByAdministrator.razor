@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@inject HttpClient Http
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center">@Model?.Names</h5>
            </div>
            <div class="modal-body">
                @if (inputModel == null)
                {
                    <div>loading</div>
                }
                else
                {
                    <!-- Register Form -->
                    <EditForm Model="@inputModel" class="form-group" enctype="multipart/form-data" Context="formContext">
                        <DataAnnotationsValidator />
                         <div class="form-group form-focus mt-30">
                            <InputText class="form-control" id="email" placeholder="Имена"  @bind-Value="inputModel.Names" />
                            <ValidationMessage For="@(() => inputModel.Names)" />
                            <label class="focus-label">Имена</label>
                        </div>
                         <div class="form-group form-focus mt-30">
                            <InputText class="form-control" id="email" placeholder="Адрес"  @bind-Value="inputModel.Address" />
                            <ValidationMessage For="@(() => inputModel.Address)" />
                            <label class="focus-label">Адрес</label>
                        </div>
                         <div class="form-group form-focus mt-30">
                            <InputText class="form-control" id="email" placeholder="Уеб сайт"  @bind-Value="inputModel.WebSite" />
                            <ValidationMessage For="@(() => inputModel.WebSite)" />
                            <label class="focus-label">Уеб сайт</label>
                        </div>
                         <div class="form-group form-focus mt-30">
                            <InputText class="form-control" id="email" placeholder="Езици"  @bind-Value="inputModel.Languages" />
                            <ValidationMessage For="@(() => inputModel.Languages)" />
                            <label class="focus-label">Езици</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputTextArea class="form-control floating" id="names" placeholder="Заглавна част" @bind-Value="inputModel.HeaderText" />
                            <ValidationMessage For="@(() => inputModel.HeaderText)" />
                            <label class="focus-label">Заглавна част</label>
                        </div>

                        <div class="form-group form-focus mt-30">
                            <InputTextArea class="form-control" id="email" placeholder="За адвоката"  @bind-Value="inputModel.AboutText" />
                            <ValidationMessage For="@(() => inputModel.AboutText)" />
                            <label class="focus-label">За адвоката</label>
                        </div>
                        @*<button type="submit" class="btn btn-primary">Запази</button>
                            <button type="button" class="btn btn-secondary">Изчисти</button>*@
                        @*<button class="btn btn-primary btn-lg" type="submit">Signup</button>*@

                    </EditForm>
                    <!-- /Register Form -->
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary"  onclick="@Save">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>



@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public AllLawyersAdministrationViewModel? Model { get; set; }

    private EditLawyerModel? inputModel;
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    [Parameter]
    public EventCallback<AllLawyersAdministrationViewModel> OnDoneCallback { get; set; }


    public void Open(AllLawyersAdministrationViewModel model)
    {

        inputModel = new EditLawyerModel();
        inputModel.HeaderText = model.HeaderText;
        inputModel.AboutText = model.AboutText;
        inputModel.Names = model.Names;
        inputModel.Address = model.Address;
        inputModel.Id = model.Id;
        inputModel.Languages = model.Languages;
        inputModel.WebSite = model.WebSite;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        Model = model;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    private async Task Save()
    {
  //       #if DEBUG
		//  await Task.Delay(10000);
		//#endif
        var response = await this.Http.PutAsJsonAsync($"Administrator/EditLawyer", inputModel);
        if (response.IsSuccessStatusCode)
        {
            Model.Id = inputModel.Id;
            Model.HeaderText = inputModel.HeaderText;
            Model.AboutText = inputModel.AboutText;
             await InvokeAsync(() => OnDoneCallback.InvokeAsync(Model));
        StateHasChanged();
        Close();
        }
       
    }


}
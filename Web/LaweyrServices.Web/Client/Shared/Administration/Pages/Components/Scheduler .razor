@page "/календар"
@using LaweyrServices.Web.Shared.DateModels
@using LawyerServices.Common
@inject DialogService DialogService
@inject HttpClient Http

@layout Shared.AdministrationLayout
<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView EndTime=@TimeSpan.FromHours(20) TimeFormat="HH" />
    <RadzenWeekView EndTime=@TimeSpan.FromHours(20) TimeFormat="HH" />
    <RadzenMonthView />
</RadzenScheduler>


@code {
    RadzenScheduler<Appointment> scheduler;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>();
    protected override async Task OnInitializedAsync()
    {
        appointments = await this.Http.GetFromJsonAsync<IList<Appointment>>("Lawyer/GetAllAppointments");
    }



    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {


        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Добави събитие",
             new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });


        if (data != null)
        {

            data.Id = Guid.NewGuid().ToString();

            await this.Http.PostAsJsonAsync("Lawyer/SaveCompanyAppointments", data);
            //await this.CompanyService.SaveCompanyAppointments(data, UserId);
            if (data.IsChecked == true)
            {
                appointments = await this.Http.GetFromJsonAsync<IList<Appointment>>("Lawyer/GetAllAppointments");
                // appointments = this.CompanyService.GetAllAppointments(UserId);
            }
            else
            {
                appointments.Add(data);
            }
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {


        if (args.Start.Date < DateTime.UtcNow.Date)
        {
            await DialogService.OpenAsync<DetailAppointmentPage>("Detail Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });
        }
        else
        {
            await DialogService.OpenAsync<EditAppointmentPage>("Промени събитието", new Dictionary<string, object> { { "Appointment", args.Data } });

        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == GlobalConstants.Meeting)
        {
            args.Attributes["style"] = "background: red";
        }
    }
}

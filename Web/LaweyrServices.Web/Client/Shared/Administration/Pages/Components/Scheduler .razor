@page "/scheduler"
@using LaweyrServices.Web.Shared.DateModels
@using LawyerServices.Common
@inject DialogService DialogService
@inject HttpClient Http

@layout Shared.AdministrationLayout

<AuthorizeView Context="authorize" Roles="Lawyer, Notary">
    <Authorized>

      
        <div class="card">
            <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                             TextProperty="Text" SelectedIndex="2"
                             SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
                <RadzenDayView EndTime=@TimeSpan.FromHours(20) TimeFormat="HH" />
                <RadzenWeekView EndTime=@TimeSpan.FromHours(20) TimeFormat="HH" />
                <RadzenMonthView />
            </RadzenScheduler>
        </div>
        <ConfirmationDateInRangeModal @ref="Modal" OnDoneCallback="OnModalDone"></ConfirmationDateInRangeModal>
        <CancelAppoinmentByCurrentDate @ref="Modaltwo" OnDoneCallback="OnSecondModalDone"></CancelAppoinmentByCurrentDate>
          <AuthorizeView Roles="Lawyer">
            <Authorized>
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                Отменете всички срещи в диапазон
                            </div>
                            <div class="card-body">
                                @if (model == null)
                                {
                                    <p>loading</p>
                                }
                                else
                                {
                                    <EditForm Context="form1" Model="@model" OnValidSubmit="@HandleValidSubmitDateInRange">
                                        <DataAnnotationsValidator />
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label>Начална дата <span class="text-danger">*</span></label>
                                                    <InputDate class="form-control" @bind-Value="model.FirstDate" />
                                                </div>
                                            </div>

                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label>Крайна дата <span class="text-danger">*</span></label>
                                                    <InputDate class="form-control" @bind-Value="model.LastDate" />
                                                </div>
                                            </div>

                                            <div class="row mt-2">
                                                <div class="form-group mb-0">
                                                    <label>Въведете причина за оказа</label>
                                                    <InputTextArea class="form-control" id="text" @bind-Value="model.ReasonFromCanceled" rows="7" cols="25" />
                                                    <ValidationMessage For="@(() => model.ReasonFromCanceled)" />
                                                </div>
                                                @* <div class="col-sm-12 col-md-10 col-lg-8">
                                                    <InputTextArea class="form-control" id="text" @bind-Value="model.ReasonFromCanceled" rows="7" cols="25" />
                                                    </div>*@
                                            </div>
                                            @* <div class="submit-section submit-btn-bottom text-center">
                                                <button type="submit" class="btn btn-danger submit-btn">Отмени</button>
                                                </div>*@
                                            <div class="submit-section submit-btn-bottom text-center">
                                                <button type="button" @onclick="() => Modal.Open(model)" class="btn btn-border-d btn-round btn-block">Отмени</button>
                                            </div>
                                            @*<div class="col-sm-4">
                                                <button class="btn btn-primary" type="submit">Submit</button>
                                                </div>*@
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">

                                Отменете всички срещи на конкретна дата
                            </div>
                            <div class="card-body">
                                @if (oneDateModel == null)
                                {
                                    <p>loading</p>
                                }
                                else
                                {
                                    <EditForm Context="form" Model="@oneDateModel" OnValidSubmit="@HandleValidSubmitDate">
                                        <DataAnnotationsValidator />
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group">
                                                    <label>Изберете дата <span class="text-danger">*</span></label>
                                                    <InputDate class="form-control" @bind-Value="oneDateModel.Date" />
                                                </div>
                                            </div>
                                            <div class="row mt-2">
                                                <div class="form-group mb-0">
                                                    <label>Въведете причина за оказа</label>
                                                    <InputTextArea class="form-control" id="text" @bind-Value="oneDateModel.ReasonFromCanceled" rows="7" cols="25" />
                                                    <ValidationMessage For="@(() => oneDateModel.ReasonFromCanceled)" />
                                                </div>
                                                @* <div class="col-sm-12 col-md-10 col-lg-8">
                                                    <InputTextArea class="form-control" id="text" @bind-Value="model.ReasonFromCanceled" rows="7" cols="25" />
                                                    </div>*@
                                            </div>
                                            <div class="submit-section submit-btn-bottom text-center">
                                                <button type="button" @onclick="() => Modaltwo.Open(oneDateModel)" class="btn btn-border-d btn-round btn-block">Отмени</button>
                                            </div>
                                            @*<div class="col-sm-4">
                                                <button class="btn btn-primary" type="submit">Submit</button>
                                                </div>*@
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Profile", true);
        }
    </NotAuthorized>
</AuthorizeView>
<style>
    .btn.btn-round {
        border-radius: 2px;
    }

    .btn-border-d {
        background: transparent;
        border: 1px solid #FF0000;
        color: #111;
    }

    .btn {
        border-radius: 0;
        font-family: "Roboto Condensed", sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        font-size: 11px;
        padding: 8px 37px;
    }

        .btn.btn-border-d:hover,
        .btn.btn-border-d:focus {
            background: #FF0000;
            color: #fff;
        }

</style>



@code {
    RadzenScheduler<Appointment> scheduler;
    private ConfirmationDateInRangeModal Modal { get; set; }
    private CancelAppoinmentByCurrentDate Modaltwo { get; set; }
    CancelAppointmentInputModel? model;
    CancelAppointmentForOneDateInputModel? oneDateModel;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>();
    protected override async Task OnInitializedAsync()
    {

        model = new CancelAppointmentInputModel() { FirstDate = DateTime.Now.ToLocalTime(), LastDate = DateTime.Now.ToLocalTime().AddDays(1) };
        oneDateModel = new CancelAppointmentForOneDateInputModel() { Date = DateTime.Now.ToLocalTime() };
        appointments = await this.Http.GetFromJsonAsync<IList<Appointment>>("Scheduler/GetAllAppointments");
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: #DCDEE6;";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: #DCDEE6;";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.Start.Date < DateTime.UtcNow.Date)
        {
            return;
        }
        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Добави събитие",
             new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });


        if (data != null)
        {

            data.Id = Guid.NewGuid().ToString();

            await this.Http.PostAsJsonAsync("Scheduler/SaveCompanyAppointments", data);

            if (data.IsChecked == true)
            {
                appointments = await this.Http.GetFromJsonAsync<IList<Appointment>>("Scheduler/GetAllAppointments");
          
            }
            else
            {
                appointments.Add(data);
            }
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }
    private async Task OnModalDone(CancelAppointmentInputModel model)
    {
        await scheduler.Reload();
        model.ReasonFromCanceled = null;
        StateHasChanged();
    }
    private async Task OnSecondModalDone(CancelAppointmentForOneDateInputModel model)
    {
        await scheduler.Reload();
        StateHasChanged();
    }
    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        if (args.Start.Date < DateTime.UtcNow.Date || args.Data.IsCanceled == true || args.Data.IsRequested == true)
        {
            await DialogService.OpenAsync<DetailAppointmentPage>("Детайли", new Dictionary<string, object> { { "Appointment", args.Data } });
        }
        else
        {
            await DialogService.OpenAsync<EditAppointmentPage>("Промени събитието", new Dictionary<string, object> { { "Appointment", args.Data } });
            //todo edit apointmen put
            await this.Http.PutAsJsonAsync("Scheduler/EditCompanyAppointments", args.Data);
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text.Contains(GlobalConstants.Meeting))
        {
            args.Attributes["style"] = "background: red";
        }
        else
        {
            if (args.Data.IsRequested == true)
            {
                args.Attributes["style"] = "background: #01FF70";
            }
            else
            {
                args.Attributes["style"] = "background: #001f3f";
            }
            
        }
    }
    private void HandleValidSubmitDateInRange()
    {
        var response = this.Http.PutAsJsonAsync<CancelAppointmentInputModel>("Appointment/CancelAppointmentInRange", model);
        if (response.IsCompleted)
        {
            //todo delate is canceled
        }
    }

    private void HandleValidSubmitDate()
    {
        var response = this.Http.PutAsJsonAsync<CancelAppointmentForOneDateInputModel>("Appointment/CancelAppointmentFromDate", oneDateModel);
        if (response.IsCompleted)
        {
            //todo delate is canceled
        }
    }
}

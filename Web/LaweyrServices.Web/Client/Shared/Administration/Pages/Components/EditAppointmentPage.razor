@using LaweyrServices.Web.Shared.DateModels
@using LawyerServices.Common

@inject DialogService DialogService



<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col">
            <h3 class="text-center">@model.Text</h3>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker ShowSeconds="false" @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker ShowSeconds="false" Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </div>
    </div>

    @if (model.Text == GlobalConstants.Meeting)
    {
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Дело номер" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.CaseNumber" Name="CaseNumber" />
                <RadzenLengthValidator Max="10" Text="Максимум 10 символа" Component="CaseNumber" />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Съд" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.Court" Name="Court" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="Court" />
            </div>
        </div>
         <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Страна по делото" />
            </div>
            <div class="col">
                <RadzenTextBox @bind-Value="@model.SideCase" Name="SideCase" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="SideCase" />
            </div>
        </div>
         <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Вид на делото" />
            </div>
            <div class="col">
                @*<RadzenTextBox @bind-Value="@model.TypeOfCase" Name="TypeOfCase" />
                <RadzenLengthValidator Max="30" Text="Максимум 30 символа" Component="TypeOfCase" />*@
                 <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                             Placeholder="@model?.TypeOfCase" Data=@typOfCase TextProperty="TypOfCase" ValueProperty="TypOfCase" Change=@(args => OnChange(args, "DropDown with placeholder")) />
            </div>
        </div>
        <div class="row" style="margin-bottom: 16px">
            <div class="col-md-3">
                <RadzenLabel Text="Допълнителна информация" />
            </div>
            <div class="col">
                <RadzenTextArea @bind-Value="@model.MoreInformation" Name="MoreInformation" />
                <RadzenLengthValidator Max="200" Text="Максимум 200 символа" Component="MoreInformation" Style="col=" 40" />
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public Appointment Appointment { get; set; }
    Appointment model = new Appointment();
    IEnumerable<string> typOfCase = new List<string>()
    {
        "ГД","ВГД","ТрД", "ВТрД", "НОХД", "ВНОХД", "ЧНД", "ВЧНД", "АНД","ВАНД", "АД", "ВАД", "КД","ВКС","ТД"
    };
    protected override void OnParametersSet()
    {
        model = Appointment;
    }
    void OnSubmit(Appointment model)
    {
        if (model.Start >= model.End && model.Text == GlobalConstants.Client)
        {
            return;
        }
        //Todo: Put to controller scheduler
        
        DialogService.Close(model);
    }
    void OnChange(object value, string name)
    {
        
        
    }
}
@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@using LaweyrServices.Web.Shared.FixedCostModels
@using LawyerServices.Data.Models.Enumerations
@inject HttpClient Http
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (lawyerModel == null)
                {
                    <Spiner></Spiner>
                }
                else
                {
                    <EditForm Model="@lawyerModel" class="form-group" enctype="multipart/form-data">
                        <DataAnnotationsValidator />
                         
                        <div class="form-group form-focus">
                            <InputText class="form-control floating" id="names" placeholder="Вашите имена" @bind-Value="lawyerModel.Names" />
                            <ValidationMessage For="@(() => lawyerModel.Names)" />
                            <label class="focus-label">Имена</label>
                        </div>
                        <div class="form-group form-focus">
                            <RadzenDatePicker @bind-Value=@lawyerModel.ExpirationDate Change=@(args => OnChangeDate(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" />
                            <label class="focus-label">Валидност на акаунта</label>
                        </div>
                        <div class="form-group form-focus">
                            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                        Data=@(townModel?.Select(c => c.Name).Distinct())
                                        Change=@(args => OnChange(args, "DropDown")) Placeholder="Изберете град" />
                        </div>
                        <div class="form-group form-focus">
                            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                        Data=@(languages)
                                        Change=@(args => OnAddLanguages(args, "DropDown")) Placeholder="Изберете език" />
                        </div>
                        @if (!String.IsNullOrWhiteSpace(languagesToAdd))
                        {
                            <p>
                                @languagesToAdd <a class="btn btn-sm bg-danger-light" @onclick="@Delete" @onclick:preventDefault href="">
                                    <i class="oi oi-trash"></i>
                                </a>
                            </p>
                        }
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="email" placeholder="Имейл" @bind-Value="lawyerModel.Email" />
                            <ValidationMessage For="@(() => lawyerModel.Email)" />
                            <label class="focus-label">Имейл</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="phone" placeholder="Телефон" @bind-Value="lawyerModel.PhoneNumber" />
                            <ValidationMessage For="@(() => lawyerModel.PhoneNumber)" />
                            <label class="focus-label">Телефон</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="jurisdiction" placeholder="Юрисдикция" @bind-Value="lawyerModel.Jurisdiction" />
                            <ValidationMessage For="@(() => lawyerModel.Jurisdiction)" />
                            <label class="focus-label">Юрисдикция</label>
                        </div>
                         <div class="form-group form-focus">
                            <InputText class="form-control" id="jurisdiction" placeholder="Дата на лиценз" @bind-Value="lawyerModel.LicenceDate" />
                            <ValidationMessage For="@(() => lawyerModel.LicenceDate)" />
                            <label class="focus-label">Дата на лиценз</label>
                        </div>
                        <div class="form-group form-focus">
                            <InputText class="form-control" id="address" placeholder="Адрес" @bind-Value="lawyerModel.AddressLocation" />
                            <ValidationMessage For="@(() => lawyerModel.AddressLocation)" />
                            <label class="focus-label">Адрес</label>
                        </div>
                         <div class="form-group form-focus">
                            <InputTextArea class="form-control floating" id="names" placeholder="Заглавна част" @bind-Value="lawyerModel.HeaderText" />
                            <ValidationMessage For="@(() => lawyerModel.HeaderText)" />
                            <label class="focus-label">Заглавна част</label>
                        </div>

                        <div class="form-group form-focus mt-30">
                            <InputTextArea class="form-control" id="email" placeholder="За адвоката"  @bind-Value="lawyerModel.AboutText" />
                            <ValidationMessage For="@(() => lawyerModel.AboutText)" />
                            <label class="focus-label">За адвоката</label>
                        </div>
                         <div class="checkbox">
                            <InputCheckbox @bind-Value="lawyerModel.IsOwner" />
                            <ValidationMessage For="@(() => lawyerModel.IsOwner)" />
                            <label class="focus-label">Собственик</label>
                        </div>
                        <div class="checkbox">
                            <InputCheckbox @bind-Value="lawyerModel.PhoneVerification" />
                            <ValidationMessage For="@(() => lawyerModel.PhoneVerification)" />
                            <label class="focus-label">Проведен разговор</label>
                        </div>
                         <div class="checkbox">
                            <InputCheckbox @bind-Value="lawyerModel.IsPublicPhoneNuber" />
                            <ValidationMessage For="@(() => lawyerModel.IsPublicPhoneNuber)" />
                            <label class="focus-label">Публичен телефон</label>
                        </div>
                        <div class="text-center">

                            <button type="button">dsaads</button>
                        </div>
                    </EditForm>

                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="@Save">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>



@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private IEnumerable<TownViewModel>? townModel;
    private CreateLawyerModel? lawyerModel;
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private Profession profesion;

    private List<string>? languages;

    [Parameter]
    public string? languagesToAdd { get; set; } = String.Empty;
    [Parameter]
    public EventCallback<CreateLawyerModel> OnDoneCallback { get; set; }

    [Parameter]
    public string? Lawfirm { get; set; }

    public async void Open(string Lawfirm)
    {
        languages = new List<string>(){
                 "Азерски","Албански","Английски",
                 "Арабски","Арменски","Африкаанс",
                 "Беларуски","Босненски","Български",
                 "Виетнамски","Датски","Есперанто",
                 "Естонски","Грузински","Немски",
                 "Гръцки","Зулуски","Иврит",
                 "Хинди","Исландски","Индонезийски",
                 "Ирландски","Испански","Италиански",
                 "Казахски","Каталонски","Кечуа",
                 "Китайски","Корейски","Корсикански",
                 "Кюрдски","Латински","Латвийски",
                 "Литовски","Люксембургски","Македонски",
                 "Малайски","Малтийски","Монголски",
                 "Норвежки","Персийски","Полски",
                 "Португалски","Пущунски","Румънски",
                 "Руски","Сръбски","Словашки",
                 "Словенски","Суахили","Таджикски",
                 "Татарски","Тайландски","Турски",
                 "Тюркменски","Уелски","Узбекски",
                 "Украински","Унгарски","Урду",
                 "Фарси","Фарьорски","Финландски",
                 "Френски","Холандски","Хърватски",
                  "Чешки","Шведски","Японски",
            };

        this.townModel = await Http.GetFromJsonAsync<IEnumerable<TownViewModel>>("Administrator/GetTowns");
        lawyerModel = new CreateLawyerModel();
        lawyerModel.Languages = new List<string>();
        this.Lawfirm = Lawfirm;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;

        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    private async Task Save()
    {
        lawyerModel.Role = Profession.Lawyer;
        lawyerModel.OfficeName = Lawfirm;
        var response = await this.Http.PostAsJsonAsync<CreateLawyerModel>("Administrator/CreateLawyerAndFirmName", lawyerModel);
        if (response.IsSuccessStatusCode)
        {

            await InvokeAsync(() => OnDoneCallback.InvokeAsync(lawyerModel));
            StateHasChanged();
            Close();
        }

    }
    void OnChange(object value, string name)
    {
        lawyerModel.TownName = value.ToString();

    }
    void OnAddLanguages(object value, string name)
    {
        lawyerModel.Languages.Add(value.ToString());

        languagesToAdd = languagesToAdd + " " + value.ToString();
        StateHasChanged();

    }
    void Delete()
    {
        languagesToAdd = String.Empty;
        lawyerModel.Languages = new List<string>();
    }
    void OnChangeDate(DateTime? value, string name, string format)
    {
       
        lawyerModel.ExpirationDate = (DateTime)value;
    }
}
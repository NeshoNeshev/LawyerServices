@page "/alllawyers"
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.AministrationViewModels
@using Microsoft.AspNetCore.Authorization


@layout Shared.AdministrationLayout

@inject NavigationManager navigationManager
@inject HttpClient Http



<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 col-lg-12 col-xl-12">

            <AuthorizeView Roles="Administrator">
                <Authorized>
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                    FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@allLawyers" TItem="AllLawyersAdministrationViewModel" 
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    LogicalFilterOperator="LogicalFilterOperator.Or">
                        <Columns>

                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Title="Photo" Sortable="false" Filterable="false" Width="80px">
                                <Template Context="data">
                                    <RadzenImage Path="@data.ImgUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Property="Names" Title="Имена" Width="115px"/>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Property="LawFirmName" Title="Кантора" Width="115px"/>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Property="ExpirationDate" Title="Валидност" Filterable="false" FormatString="{0:d}" Width="100px"/>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Context="allLawyers" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="115px" Title="Промени">
                                <Template Context="data">
                                    <button type="button" class="btn btn-warning btn-sm" @onclick="() => Modal.Open(data)">Промени</button>
                                </Template>

                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Context="allLawyers" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="115px" Title="Спри">
                                <Template Context="data">
                                    @if (data.StopAccount == false)
                                    {
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => ShureModal.Open(data.Id)">Спри</button>
                                    }
                                </Template>
                                @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Context="allLawyers" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="115px">
                                <Template Context="data">
                                    @if (data.StopAccount == true)
                                    {
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => OnActivate(data.Id)">Активирай</button>
                                    }
                                </Template>
                                @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Context="allLawyers" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="115px">
                                <Template Context="data">
                                    @if (data.IsDeleted == false)
                                    {
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => OnDeleteAccount(data.Id)">Изтрий</button>
                                    }
                                </Template>
                                @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="AllLawyersAdministrationViewModel" Context="allLawyers" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="115px">
                                <Template Context="data">
                                    @if (data.IsDeleted == true)
                                    {
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => OnRestoreAccount(data.Id)">Възтанови</button>
                                    }
                                </Template>
                                @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>

                    <EditLawyerByAdministrator @ref="Modal" OnDoneCallback="OnModalDone"></EditLawyerByAdministrator>
                    <SureStopCompanyModal @ref="ShureModal" OnDoneCallback="OnSure"></SureStopCompanyModal>
                </Authorized>
                <NotAuthorized>
                    @{
                        navigationManager.NavigateTo("/Profile", true);
                    }
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

</div>

@code {
    private IEnumerable<AllLawyersAdministrationViewModel>? allLawyers;
    private EditLawyerByAdministrator Modal { get; set; }
    private SureStopCompanyModal ShureModal { get; set; }
    protected override async Task OnInitializedAsync()
    {
        allLawyers = await this.Http.GetFromJsonAsync<IEnumerable<AllLawyersAdministrationViewModel>>("Administrator/GetAllLawyers");

        await base.OnInitializedAsync();

    }
    private void OnModalDone(AllLawyersAdministrationViewModel model)
    {

    }
    private async Task OnSure(string id)
    {
        var response = await this.Http.PutAsJsonAsync("Administrator/StopAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allLawyers = await this.Http.GetFromJsonAsync<IEnumerable<AllLawyersAdministrationViewModel>>("Administrator/GetAllLawyers");
        }
        StateHasChanged();
    }

    private async Task OnActivate(string id)
    {
        var response = await this.Http.PutAsJsonAsync("Administrator/ActivateAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allLawyers = await this.Http.GetFromJsonAsync<IEnumerable<AllLawyersAdministrationViewModel>>("Administrator/GetAllLawyers");
        }
        StateHasChanged();
    }
    private async Task OnDeleteAccount(string id)
    {
        var response = await this.Http.DeleteAsync($"Administrator/DeleteLayerAccount?Id={id}");
        if (response.IsSuccessStatusCode)
        {
            allLawyers = await this.Http.GetFromJsonAsync<IEnumerable<AllLawyersAdministrationViewModel>>("Administrator/GetAllLawyers");
        }
        StateHasChanged();

    }
    private async Task OnRestoreAccount(string id)
    {

        var response = await this.Http.PutAsJsonAsync("Administrator/RestoreLayerAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allLawyers = await this.Http.GetFromJsonAsync<IEnumerable<AllLawyersAdministrationViewModel>>("Administrator/GetAllLawyers");
        }
        StateHasChanged();
    }
}
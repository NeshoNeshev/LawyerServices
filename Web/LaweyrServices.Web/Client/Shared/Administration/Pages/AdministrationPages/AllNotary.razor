@page "/allnotary"
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.AministrationViewModels
@using Microsoft.AspNetCore.Authorization


@layout Shared.AdministrationLayout

@inject NavigationManager navigationManager
@inject HttpClient Http



<div class="content">
    <div class="container">
        <AuthorizeView Roles="Administrator">
            <Authorized>
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@allNotary" TItem="AllNotaryAdministrationViewModel" ColumnWidth="300px"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Title="Photo" Sortable="false" Filterable="false" Width="80px">
                            <Template Context="data">
                                <RadzenImage Path="@data.ImgUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Property="Names" Title="Names" />
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Context="allNotary" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                <button type="button" class="btn btn-warning btn-sm" @onclick="() => Modal.Open(data)">Промени</button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Context="allNotary" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                @if (data.StopAccount == false)
                                {
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => ShureModal.Open(data.Id)">Спри</button>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Context="allNotary" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                @if (data.StopAccount == true)
                                {
                                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => OnActivate(data.Id)">Активирай</button>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Context="allNotary" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                @if (data.IsDeleted == false)
                                {
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => OnDeleteAccount(data.Id)">Изтрий</button>
                                }
                            </Template>
                            @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AllNotaryAdministrationViewModel" Context="allNotary" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                            <Template Context="data">
                                @if (data.IsDeleted == true)
                                {
                                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => OnRestoreAccount(data.Id)">Възтанови</button>
                                }
                            </Template>
                            @*<button type="button" class="btn btn-warning btn-sm" @onclick="() => ShureModal.Open()">Спри</button>*@
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

                <EditNotaryByAdministrator @ref="Modal" OnDoneCallback="OnModalDone"></EditNotaryByAdministrator>
                <SureStopCompanyModal @ref="ShureModal" OnDoneCallback="OnSure"></SureStopCompanyModal>
            </Authorized>
            <NotAuthorized>
                @{
                    navigationManager.NavigateTo("/Profile", true);
                }
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private IEnumerable<AllNotaryAdministrationViewModel>? allNotary;
    private EditNotaryByAdministrator Modal { get; set; }
    private SureStopCompanyModal ShureModal { get; set; }
    protected override async Task OnInitializedAsync()
    {
        allNotary = await this.Http.GetFromJsonAsync<IEnumerable<AllNotaryAdministrationViewModel>>("Administrator/GetAllNotary");

        await base.OnInitializedAsync();

    }
    void OnStop()
    {

    }
    private void OnModalDone(AllNotaryAdministrationViewModel model)
    {

    }
    private async Task OnSure(string id)
    {
        var response = await this.Http.PutAsJsonAsync("Administrator/StopAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allNotary = await this.Http.GetFromJsonAsync<IEnumerable<AllNotaryAdministrationViewModel>>("Administrator/GetAllNotary");
        }
    }

    private async Task OnActivate(string id)
    {
        var response = await this.Http.PutAsJsonAsync("Administrator/ActivateAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allNotary = await this.Http.GetFromJsonAsync<IEnumerable<AllNotaryAdministrationViewModel>>("Administrator/GetAllNotary");
        }
    }
    private async Task OnDeleteAccount(string id)
    {
        var response = await this.Http.DeleteAsync($"Administrator/DeleteNotaryAccount?Id={id}");
        if (response.IsSuccessStatusCode)
        {
            allNotary = await this.Http.GetFromJsonAsync<IEnumerable<AllNotaryAdministrationViewModel>>("Administrator/GetAllNotary");
        }
        StateHasChanged();

    }
    private async Task OnRestoreAccount(string id)
    {

        var response = await this.Http.PutAsJsonAsync("Administrator/RestoreNotaryAccount", id);
        if (response.IsSuccessStatusCode)
        {
            allNotary = await this.Http.GetFromJsonAsync<IEnumerable<AllNotaryAdministrationViewModel>>("Administrator/GetAllNotary");
        }
        StateHasChanged();
    }
}
@page "/profile"
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.UserModels
@inject HttpClient Http
@layout Shared.AdministrationLayout
<AuthorizeView Roles="User">
    <Authorized>
        <div class="col-md-9 col-lg-10 col-xl-11">
            <div class="card">
                <div class="card-body">
                    @if (inputModel == null)
                    {
                        <Spiner></Spiner>
                    }
                    else
                    {
                        <EditForm class="form-row" Context="formContext" Model="@inputModel" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <div class="row form-row">
                                <div class="col-12 col-md-12">
                                    <h3 class="subtitle text-center">Потребител</h3>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-group">
                                        <label>Име</label>
                                        <InputText @bind-Value="inputModel.FirstName" class="form-control" />
                                        <ValidationMessage For="@(() => inputModel.FirstName)" />
                                    </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-group">
                                        <label>Фамилия</label>
                                        <InputText type="text" @bind-Value="inputModel.LastName" class="form-control" />
                                        <ValidationMessage For="@(() => inputModel.LastName)" />
                                    </div>
                                </div>
                                <div class="col-12 col-md-6">
                                    <div class="form-group">
                                        <label>Телефон <span class="text-danger">*</span></label>

                                        <InputText type="phone" @bind-Value="inputModel.PhoneNumber" class="form-control" />
                                        <ValidationMessage For="@(() => inputModel.PhoneNumber)" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" name="email_confirm" @bind-Value="inputModel.IsReserved" />
                                        <ValidationMessage For="@(() => inputModel.IsReserved)" />

                                        <label class="form-check-label" for="email_confirm">
                                            Имейл потвърждения за запазени или отказани срещи
                                        </label>
                                    </div>
                                    @* <div class="form-check">
                                        <InputCheckbox class="form-check-input" name="email_confirm" @bind-Value="inputModel.IsSendSms" />
                                        <ValidationMessage For="@(() => inputModel.IsSendSms)" />

                                        <label class="form-check-label" for="email_confirm">
                                        СМС  потвърждения за запазени или отказани срещи
                                        </label>
                                        </div>*@
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" name="email_confirm" @bind-Value="inputModel.IsReminderForComing" />
                                        <ValidationMessage For="@(() => inputModel.IsReminderForComing)" />

                                        <label class="form-check-label" for="email_confirm">
                                            Имейл напомняния за предстоящи срещи
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-border-d btn-round btn-block">Запази</button>
                                </div>
                            </div>
                        </EditForm>
                    }

                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/notfound");
        }
    </NotAuthorized>
</AuthorizeView>
<style>
     .btn.btn-round {
        border-radius: 2px;
    }

    .btn-border-d {
        background: transparent;
        border: 1px solid #479cc8;
        color: #111;
    }

    .btn {
        border-radius: 0;
        font-family: "Roboto Condensed", sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        font-size: 11px;
        padding: 8px 37px;
    }

        .btn.btn-border-d:hover,
        .btn.btn-border-d:focus {
            background: #479cc8;
            color: #fff;
        }

    .btn-block {
        display: block;
        width: 100%;
    }

</style>
@code {
    private ApplicationUserViewModel? viewModel;
    private EditUserInformationInputModel? inputModel;
    protected override async Task OnInitializedAsync()
    {
        viewModel = await Http.GetFromJsonAsync<ApplicationUserViewModel>("User/UserInformation");
        inputModel = new EditUserInformationInputModel()
            {
                FirstName = viewModel.FirstName,
                LastName = viewModel.LastName,
                PhoneNumber = viewModel.PhoneNumber,
                IsReminderForComing = viewModel.IsReminderForComing,
                IsReserved = viewModel.IsReserved,
                IsSendSms = viewModel.IsSendSms,

            };
    }
    public async void HandleValidSubmit()
    {
        //var response =  await Http.PutAsJsonAsync("Profile/EditLawyerProfileInformation", editLawyer);

        var response = await Http.PutAsJsonAsync("User/EditUserByUser", inputModel);

        if (!response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/Something-Went-Wrong");
            StateHasChanged();
        }

    }

}

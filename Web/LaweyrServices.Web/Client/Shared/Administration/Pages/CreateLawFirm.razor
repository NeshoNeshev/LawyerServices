@page "/createlawfirm"
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.AdministratioInputModels
@using LaweyrServices.Web.Shared.AministrationViewModels
@using LaweyrServices.Web.Shared.LawFirmModels
@using LawyerServices.Data.Models.Enumerations
@using Microsoft.AspNetCore.Authorization
@layout Shared.AdministrationLayout

@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient Http

<h3 class="text-center">LawFirm</h3>
<div class="row">
    @if (success == true)
    {

    }

</div>

<div class="row mt-2">

    <div class="col-lg-6">
        @if (success == false)
        {

            @if (model == null)
            {
                <Spiner></Spiner>
            }
            else
            {
                <div class="card widget-profile pat-widget-profile shadow">
                    <div class="card-body">
                        <EditForm Model="@model" OnValidSubmit="@OnSubmit" class="form-group" enctype="multipart/form-data">
                            <DataAnnotationsValidator />

                            <div class="form-group form-focus">
                                <InputText class="form-control floating" id="names" placeholder="Име на катората" @bind-Value="model.Name" />
                                <ValidationMessage For="@(() => model.Name)" />
                                <label class="focus-label">Име на катората</label>
                            </div>
                            <div class="form-group form-focus">
                                <RadzenDropDown AllowClear="true" TValue="string" Class="w-100"
                                        Data=@(townModel?.Select(c => c.Name).Distinct())
                                        Change=@(args => OnChange(args, "DropDown")) Placeholder="Изберете град" />
                            </div>
                            <div class="form-group form-focus">
                                <InputText class="form-control" id="email" placeholder="Имейл" @bind-Value="model.Email" />
                                <ValidationMessage For="@(() => model.Email)" />
                                <label class="focus-label">Имейл</label>
                            </div>
                            <div class="form-group form-focus">
                                <InputText class="form-control" id="website" placeholder="Адрес" @bind-Value="model.Address" />
                                <ValidationMessage For="@(() => model.Address)" />
                                <label class="focus-label">Адрес</label>
                            </div>
                            <div class="form-group form-focus">
                                <InputText class="form-control" id="phone" placeholder="Телефони" @bind-Value="model.PhoneNumber" />
                                <ValidationMessage For="@(() => model.PhoneNumber)" />
                                <label class="focus-label">Телефони</label>
                            </div>
                            <div class="form-group form-focus">
                                <InputTextArea class="form-control" id="text" placeholder="Описание" @bind-Value="model.About" />
                                <ValidationMessage For="@(() => model.About)" />
                                <label class="focus-label">Описание</label>
                            </div>
                             <div class="checkbox">
                                <InputCheckbox @bind-Value="model.IsPublicPhone" />
                                <ValidationMessage For="@(() => model.IsPublicPhone)" />
                                <label class="focus-label">Публични телефони</label>
                            </div>
                            <div class="checkbox">
                                <InputCheckbox @bind-Value="model.PhoneVerification" />
                                <ValidationMessage For="@(() => model.PhoneVerification)" />
                                <label class="focus-label">Проведен разговор</label>
                            </div>
                            <div class="text-center">
                                <button class="btn btn-border-d btn-round btn-block" type="submit">Submit</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
                <!-- Register Form -->
                <!-- /Register Form -->
            }
        }
        else
        {
            <div>
                <p>Създадохте кантора @Lawfirm</p>

                <table class="table">
                    <thead>
                        <tr>

                            <th scope="col">Имена</th>
                            <th scope="col">Телефон</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            @foreach (var item in list)
                            {
                                <td>@item.Names</td>
                                <td>@item.PhoneNumber</td>
                            }
                        </tr>

                    </tbody>
                </table>
            </div>
        }
    </div>
    <div class="col-lg-6">

        @if (success == true)
        {

            @if (lawyerModel == null)
            {
               <Spiner></Spiner>
            }
            else
            {
                <div class="card widget-profile pat-widget-profile shadow">
                    <div class="card-body">
                        <p class="text-center">Добави адвокат</p>
                        <button type="button" class="btn btn-warning btn-sm" @onclick="() => Modal.Open(Lawfirm)">Промени</button>                      
                    </div>
                </div>
                <!-- /Register Form -->
            }
        }



    </div>
    <AddLawyerToLawFirmModal @ref="Modal" OnDoneCallback="OnModalDone"></AddLawyerToLawFirmModal>
</div>
<style>
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .btn.btn-round {
        border-radius: 2px;
    }

    .btn-border-d {
        background: transparent;
        border: 1px solid #111111;
        color: #111;
    }

    .btn {
        border-radius: 0;
        font-family: "Roboto Condensed", sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        font-size: 11px;
        padding: 8px 37px;
    }

        .btn.btn-border-d:hover,
        .btn.btn-border-d:focus {
            background: #111111;
            color: #fff;
        }

    .btn-block {
        display: block;
        width: 100%;
    }

    a, .btn {
        transition: all 0.125s ease-in-out 0s;
    }
</style>
@code {

    private IEnumerable<TownViewModel>? townModel;
    private LawFirmInputModel? model = new LawFirmInputModel();
    private Profession profesion;
    private CreateLawyerModel? lawyerModel;

    [Parameter]
    public List<CreateLawyerModel>? list { get; set; }
    //private List<CreateLawyerModel>? list = new List<CreateLawyerModel>();

    [Parameter]
    public string? Lawfirm { get; set; }

    private AddLawyerToLawFirmModal Modal { get; set; }



    bool? success = false;
    protected override async Task OnInitializedAsync()
    {
        #if DEBUG
            await Task.Delay(10000);
        #endif

        list = new List<CreateLawyerModel>();
        lawyerModel = new CreateLawyerModel();
        this.townModel = await Http.GetFromJsonAsync<IEnumerable<TownViewModel>>("Administrator/GetTowns");
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }
    private void OnModalDone(CreateLawyerModel? model)
    {

        this.list.Add(model);
    }
    private async Task OnSubmit()
    {


        var response = await Http.PostAsJsonAsync("Administrator/CreateLawFirm", model);
        if (response.IsSuccessStatusCode)
        {

            Lawfirm = model.Name;
            success = true;
            StateHasChanged();

        }
        //test

        //await this.requestService.SetIsApproved(exist.Id);

    }
    private async Task OnSubmitLawyer()
    {
        lawyerModel.Role = Profession.Lawyer;
        lawyerModel.OfficeName = Lawfirm;
        var response = await this.Http.PostAsJsonAsync<CreateLawyerModel>("Administrator/CreateLawyerAndFirmName", lawyerModel);
        if (response.IsSuccessStatusCode)
        {

        }
        StateHasChanged();
    }
    void OnChange(object value, string name)
    {
        model.Town = value.ToString();

    }
}
@page "/booking/{lawyerId}/{appointmentId}"
@using LaweyrServices.Web.Shared.BookingModels
@using LaweyrServices.Web.Shared.DateModels
@using LaweyrServices.Web.Shared.LawyerViewModels
@using LaweyrServices.Web.Shared.UserModels
@using LaweyrServices.Web.Shared.WorkingTimeModels
@using System.Globalization

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IHttpClientFactory ClientFactory
<div class="content marg">
    <div class="container">
        <div class="row">
            <div class="col-md-7 col-lg-8">
                <div class="card shadow">
                    <div class="card-body">
                        @if (userRequestModel == null)
                        {
                            <p>loading</p>
                        }
                        else
                        {
                            <EditForm Model="@userRequestModel" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />

                                <div class="info-widget">
                                    <h4 class="card-title">Детайли за срещата</h4>
                                    <p>@notLogin</p>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Име</label>
                                                <InputText class="form-control" id="firstname" placeholder="Име" required @bind-Value="userRequestModel.FirstName" />
                                                <ValidationMessage For="@(() => userRequestModel.FirstName)" />

                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Фамилия</label>
                                                <InputText class="form-control" id="lastname" placeholder="Фамилия" required @bind-Value="userRequestModel.LastName" />
                                                <ValidationMessage For="@(() => userRequestModel.LastName)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Имейл</label>
                                                <InputText class="form-control" id="email" placeholder="Имейл" required @bind-Value="userRequestModel.Email" />
                                                <ValidationMessage For="@(() => userRequestModel.Email)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Телефон</label>
                                                <InputText class="form-control" id="phone" placeholder="Телефон" @bind-Value="userRequestModel.PhoneNumber" required/>
                                                <ValidationMessage For="@(() => userRequestModel.PhoneNumber)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Бележка към резервацията</label>
                                                <InputTextArea class="form-control" id="moreInformation" placeholder="Бележка към резервацията" @bind-Value="userRequestModel.MoreInformation" required/>
                                                <ValidationMessage For="@(() => userRequestModel.MoreInformation)" />
                                            </div>
                                        </div>
                                    </div>
                                    <AuthorizeView Context="Auth">
                                        <Authorized>
                                          
                                        </Authorized>
                                        <NotAuthorized>
                                           <div class="exist-customer">Съществуващ клиент? <a href="#">Щракнете тук, за да влезете</a></div>
                                        </NotAuthorized>
                                    </AuthorizeView>
                                    
                                </div>
                                <button type="submit">Запази</button>
                            </EditForm>
                        }
                        @if (error == null)
                        {
                            <p>Exist</p>
                        }
                        else if (error == true)
                        {
                            <p style="color:red">Часът вече е запазен !</p>
                            if (freeWte == null)
                            {
                                <p style="color:red">Адвокат @response?.LawyerBookingViewModel?.Names няма повече свободни часове !</p>
                            }
                            <p>Следващият най-ранен възможен час е:<a class="text-info" href="" @onclick="@Navigate" @onclick:preventDefault style="text-decoration: none;">@freeWte</a></p>
                        }

                    </div>
                </div>
            </div>
            <div class="col-md-5 col-lg-4 theiaStickySidebar">
                <div class="card booking-card shadow">
                    <div class="card-header">
                        <h4 class="card-title">Резюме на резервацията</h4>
                    </div>
                    <div class="card-body">
                        <div class="booking-doc-info">
                            <a href="doctor-profile.html" class="booking-doc-img">
                                <img src="@response?.LawyerBookingViewModel?.ImgUrl" alt="@response?.LawyerBookingViewModel?.Names">
                            </a>
                            <div class="booking-info">
                                <h4><a href="doctor-profile.html">@response?.LawyerBookingViewModel?.Names</a></h4>
                                <div class="rating">
                                    <RadzenRating ReadOnly="true" Stars="5" Value="5" />
                                    <span class="d-inline-block average-rating countposition">(@response?.LawyerBookingViewModel?.ReviewsCount)</span>
                                </div>
                                <div class="clinic-details">
                                    <p class="doc-location"><i class="fas fa-map-marker-alt"></i> @response?.LawyerBookingViewModel?.Address</p>
                                </div>
                            </div>
                        </div>
                        <div class="booking-summary">
                            <div class="booking-item-wrap">
                                <ul class="booking-date">
                                    <li>Дата <span>@response?.AppointmentViewModel?.StarFrom.Date.ToString("dd-MM-yyyy")</span></li>
                                    <li>Час <span>@response?.AppointmentViewModel?.StarFrom.ToString("HH:mm")</span></li>
                                </ul>
                                <ul class="booking-fee">
                                    <li>Ден <span>@response?.AppointmentViewModel?.StarFrom.DayOfWeek.ToString(new CultureInfo("bg-BG"))</span></li>
                                    
                                </ul>
                                @*<div class="booking-total">
                                    <ul class="booking-total-list">
                                        <li>
                                            <span>Total</span>
                                            <span class="total-cost">$160</span>
                                        </li>
                                    </ul>
                                </div>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .rz-rating .rzi-star {
        color: #fc0;
    }
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .marg {
        margin-top: 80px;
        margin-bottom: 120px;
    }
    .countposition {
        vertical-align: super;
    }
</style>
@code {

    [Parameter]
    public string? LawyerId { get; set; }

    [Parameter]
    public string? AppointmentId { get; set; }

    private BookingViewModel? response;

    //private AppointmentViewModel? appointment;

    //private WorkingTimeExceptionInputModel? workingTimeException;

    //private ApplicationUserViewModel? applicationUserViewModel;

    //private LawyerListItem? lawyer;

    private UserRequestModel? userRequestModel;

    bool? error;
    string? freeWte;
    string? lawyerId;
    string? appointmentId;
    string? notLogin;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {

        error = false;
        this.userRequestModel = new UserRequestModel();

        if (await IsAutenticated())
        {
            this.response = await Http.GetFromJsonAsync<BookingViewModel>($"Booking/GetBookingInformation?lawyerId={LawyerId}&appointmentId={AppointmentId}");
        }
        else
        {
            var client = ClientFactory.CreateClient("LaweyrServices.Web.ServerAPI.NoAuthenticationClient");
            this.response = await client.GetFromJsonAsync<BookingViewModel>($"Booking/GetBookingInformation?lawyerId={LawyerId}&appointmentId={AppointmentId}");
          
        }

        if (response.ApplicationUserViewModel != null)
        {
            userRequestModel.FirstName = response.ApplicationUserViewModel.FirstName;
            userRequestModel.LastName = response.ApplicationUserViewModel.LastName;
            userRequestModel.Email = response.ApplicationUserViewModel.Email;
            userRequestModel.PhoneNumber = response.ApplicationUserViewModel.PhoneNumber;
            userRequestModel.WorkingTimeExceptionId = AppointmentId;
            userRequestModel.CompanyId = LawyerId;
            userRequestModel.IsReserved = response.ApplicationUserViewModel.IsReserved;
        }
    }
    private async Task HandleValidSubmit()
    {
        //check!!!!
        if (await IsAutenticated())
        {
            var exist = await Http.GetFromJsonAsync<bool>($"Booking/FreeWte?wteId={AppointmentId}");
            if (exist == false)
            {
                var response = await Http.GetFromJsonAsync<IEnumerable<WorkingTimeExceptionBookingModel>>($"Booking/EarlyTime?lawyerId={LawyerId}");
                if (response != null)
                {
                    freeWte = response.First().StarFrom.ToString("dd/MM/yyyy HH:mm");
                    lawyerId = LawyerId;
                    appointmentId = response.First().Id;
                    error = true;
                    StateHasChanged();
                }
                error = true;
                StateHasChanged();
            }
            else
            {
                var response = await Http.PostAsJsonAsync("Booking/PostBooking", userRequestModel);
                if (response.IsSuccessStatusCode)
                {
                    this.NavigationManager.NavigateTo("/client");
                }
                else
                {
                    this.NavigationManager.NavigateTo("/Something-Went-Wrong");
                }
            }
        }
        else
        {
            this.NavigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", true);
        }

    }
    private void Navigate()
    {
        this.NavigationManager.NavigateTo($"/booking/{lawyerId}/{appointmentId}", forceLoad: true);
    }
    private async Task<bool> IsAutenticated()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}


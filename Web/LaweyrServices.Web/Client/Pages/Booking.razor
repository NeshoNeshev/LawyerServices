@page "/booking/{lawyerId}/{appointmentId}"
@using LaweyrServices.Web.Shared.DateModels
@using LaweyrServices.Web.Shared.LawyerViewModels
@using LaweyrServices.Web.Shared.UserModels
@using LaweyrServices.Web.Shared.WorkingTimeModels

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IHttpClientFactory ClientFactory
<div class="content marg">
    <div class="container">
        <div class="row">
            <div class="col-md-7 col-lg-8">
                <div class="card shadow">
                    <div class="card-body">
                        @if (userRequestModel == null)
                        {
                            <p>loading</p>
                        }
                        else
                        {
                            <EditForm Model="@userRequestModel" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />

                                <div class="info-widget">
                                    <h4 class="card-title">Personal Information</h4>
                                     <p>@notLogin</p>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>First Name</label>
                                                <InputText class="form-control" id="lastname" placeholder="Фамилия" @bind-Value="userRequestModel.FirstName" />
                                                <ValidationMessage For="@(() => userRequestModel.FirstName)" />
                                                <span asp-validation-for="Message" class="text-danger"></span>
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Last Name</label>
                                                <InputText class="form-control" id="lastname" placeholder="Фамилия" @bind-Value="userRequestModel.LastName" />
                                                <ValidationMessage For="@(() => userRequestModel.LastName)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Email</label>
                                                <InputText class="form-control" id="lastname" placeholder="Фамилия" @bind-Value="userRequestModel.Email" />
                                                <ValidationMessage For="@(() => userRequestModel.Email)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Phone</label>
                                                <InputText class="form-control" id="lastname" placeholder="Фамилия" @bind-Value="userRequestModel.PhoneNumber" />
                                                <ValidationMessage For="@(() => userRequestModel.PhoneNumber)" />
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-sm-12">
                                            <div class="form-group card-label">
                                                <label>Phone</label>
                                                <InputTextArea class="form-control" id="moreInformation" placeholder="MoreInformation" @bind-Value="userRequestModel.MoreInformation" />
                                                <ValidationMessage For="@(() => userRequestModel.MoreInformation)" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="exist-customer">Existing Customer? <a href="#">Click here to login</a></div>
                                </div>
                                <button type="submit">Submit</button>
                            </EditForm>
                        }
                        @if (error == null)
                        {
                            <p>Exist</p>
                        }
                        else if (error == true)
                        {
                            <p style="color:red">Часът вече е запазен !</p>
                            if (freeWte == null)
                            {
                                <p style="color:red">Адвокат @lawyer?.Names няма повече свободни часове !</p>
                            }
                            <p>Следващият най-ранен възможен час е:<a class="text-info" href="" @onclick="@Navigate" @onclick:preventDefault style="text-decoration: none;">@freeWte</a></p>
                        }
                       
                    </div>
                </div>
            </div>
            <div class="col-md-5 col-lg-4 theiaStickySidebar">
                <div class="card booking-card shadow">
                    <div class="card-header">
                        <h4 class="card-title">Booking Summary</h4>
                    </div>
                    <div class="card-body">
                        <div class="booking-doc-info">
                            <a href="doctor-profile.html" class="booking-doc-img">
                                <img src="@lawyer?.ImgUrl" alt="@lawyer?.Names">
                            </a>
                            <div class="booking-info">
                                <h4><a href="doctor-profile.html">@lawyer?.Names</a></h4>
                                <div class="rating">
                                    <RadzenRating ReadOnly="true" Stars="5" Value="4" />
                                    <span class="d-inline-block average-rating">35</span>
                                </div>
                                <div class="clinic-details">
                                    <p class="doc-location"><i class="fas fa-map-marker-alt"></i> @lawyer?.Address</p>
                                </div>
                            </div>
                        </div>
                        <div class="booking-summary">
                            <div class="booking-item-wrap">
                                <ul class="booking-date">
                                    <li>Date <span>@appointment?.StarFrom.Date.ToString("dd-MM-yyyy")</span></li>
                                    <li>Time <span>@appointment?.StarFrom.ToString("HH:mm")</span></li>
                                </ul>
                                <ul class="booking-fee">
                                    <li>Consulting Fee <span>@appointment?.StarFrom.DayOfWeek</span></li>
                                    <li>Booking Fee <span>$10</span></li>
                                    <li>Video Call <span>$50</span></li>
                                </ul>
                                <div class="booking-total">
                                    <ul class="booking-total-list">
                                        <li>
                                            <span>Total</span>
                                            <span class="total-cost">$160</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .marg {
        margin-top: 80px;
        margin-bottom: 120px;
    }
</style>
@code {

    [Parameter]
    public string? LawyerId { get; set; }

    [Parameter]
    public string? AppointmentId { get; set; }

    private AppointmentViewModel? appointment;

    private WorkingTimeExceptionInputModel? workingTimeException;

    private ApplicationUserViewModel? applicationUserViewModel;

    private LawyerListItem? lawyer;

    private UserRequestModel? userRequestModel;

    bool? error;
    string? freeWte;
    string? lawyerId;
    string? appointmentId;
    string? notLogin;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {

        error = false;
        this.userRequestModel = new UserRequestModel();

        if (IsAutenticated().Result)
        {
            this.appointment = await Http.GetFromJsonAsync<AppointmentViewModel>($"Booking/GetLawyerWorkingTimeExteption?appointmentId={AppointmentId}");
            this.lawyer = await Http.GetFromJsonAsync<LawyerListItem>($"Booking/GetLawyerById?lawyerId={LawyerId}");
            this.applicationUserViewModel = await Http.GetFromJsonAsync<ApplicationUserViewModel>("User/UserInformation");
        }
        else
        {
            var client = ClientFactory.CreateClient("LaweyrServices.Web.ServerAPI.NoAuthenticationClient");
            this.appointment = await client.GetFromJsonAsync<AppointmentViewModel>($"Booking/GetLawyerWorkingTimeExteption?appointmentId={AppointmentId}");
            this.lawyer = await client.GetFromJsonAsync<LawyerListItem>($"Booking/GetLawyerById?lawyerId={LawyerId}");
        }

        if (applicationUserViewModel != null)
        {
            userRequestModel.FirstName = applicationUserViewModel.FirstName;
            userRequestModel.LastName = applicationUserViewModel.LastName;
            userRequestModel.Email = applicationUserViewModel.Email;
            userRequestModel.PhoneNumber = applicationUserViewModel.PhoneNumber;
            userRequestModel.WorkingTimeExceptionId = AppointmentId;
        }
    }
    private async Task HandleValidSubmit()
    {
        if (IsAutenticated().Result)
        {
            var exist = await Http.GetFromJsonAsync<bool>($"Booking/FreeWte?wteId={AppointmentId}");
            if (exist == false)
            {
                var wte = await Http.GetFromJsonAsync<EarlyTimeModel>($"Booking/EarlyTime?lawyerId={lawyer.Id}");
                if (wte != null)
                {
                    freeWte = wte?.EarlyTime.Value.ToString("dd/MM/yyyy HH:mm");
                    lawyerId = wte.LaweyrId;
                    appointmentId = wte.WteId;
                    error = true;
                    StateHasChanged();
                }

            }
            else
            {
                var response = await Http.PostAsJsonAsync("Booking/PostBooking", userRequestModel);
                if (response.IsSuccessStatusCode)
                {
                    this.NavigationManager.NavigateTo("/client");
                }
                else
                {
                    this.NavigationManager.NavigateTo("/Something-Went-Wrong");
                }
            }
        }
        else
        {
           this.NavigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}",  true);
        }

    }
    private void Navigate()
    {
        this.NavigationManager.NavigateTo($"/booking/{lawyerId}/{appointmentId}", forceLoad: true);
    }
    private async Task<bool> IsAutenticated()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = (await authenticationStateTask).User;
        if ( user.Identity.IsAuthenticated)
        {
            return  true;
        }
        else
        {
            return false;
        }
    }
}


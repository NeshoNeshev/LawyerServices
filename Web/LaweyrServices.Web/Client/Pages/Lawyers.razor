@page "/lawyers"
@page "/lawyers/{SearchByTown}"
@page "/lawyers/{SearchByTown}/{SearchByArea}"

<PageTitle>Правен портал | Намерете добър адвокат в твоя град</PageTitle>
<HeadContent>
    <meta name="description" content="Намери добър адвокат в твоя град, разгледай потвърдени мнения на клиенти и запази час за среща веднага онлайн!">
</HeadContent>
@using LaweyrServices.Web.Client.Shared.Administration.Pages.Components
@using LaweyrServices.Web.Shared.AministrationViewModels
@using LaweyrServices.Web.Shared.AreasOfActivityViewModels
@using LaweyrServices.Web.Shared.IndexViewModels
@using LaweyrServices.Web.Shared.LawyerViewModels
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using Microsoft.EntityFrameworkCore;

@inject IHttpClientFactory ClientFactory

<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-lg-4 col-xl-3 theiaStickySidebar ">
                <div class="card search-filter shadow">
                    <div class="card-header">
                        <h4 class="card-title mb-0 text-center">Търси адвокат</h4>
                    </div>
                    <div class="card-body">
                        <div class="filter-widget">
                            <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Class="w-100"
                                            Placeholder="@town" Data=@model?.Towns TextProperty="Name" ValueProperty="Name" Change=@(args => OnChange(args, "DropDown with placeholder")) />

                        </div>
                        <div class="filter-widget">
                            <RadzenDropDown AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" TValue="string" Class="w-100"
                                            Placeholder="@area" Data=@(model?.Areas?.Select(c => c.Name).Distinct())
                                            Change=@(args => OnChangeArea(args, "DropDown")) />
                        </div>
                        <div class="text-center">
                            <button class="btn btn-border-d btn-round btn-block" @onclick="OnSearch" type="button">Филтрирай</button>
                        </div>
                        <div class="filter-widget">
                            <h4 class="text-center" style="margin-top: 15px;">Допълнителни филтри</h4>
                            <div>
                                <RadzenDropDown title="Изберете език" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true" TValue="string" Class="w-100"
                                                Data=@(languages)
                                                Change=@(args => OnAddLanguages(args, "DropDown")) Placeholder="Изберете език" />
                            </div>
                            <div>
                                <label class="custom_check">
                                    <input type="checkbox" name="select_free_first_appointment" @onchange="FreeFirstAppoitmentCheck">
                                    <span class="checkmark"></span> Безплатна първа консултация
                                </label>
                            </div>
                            <div>
                                <label class="custom_check">
                                    <input type="checkbox" name="select_fixed_cost" @onchange="FixedCostCheck">
                                    <span class="checkmark"></span> Фиксирана цена
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12 col-lg-8 col-xl-9">
                @if (this.lawyers == null)
                {
                    <Spiner></Spiner>
                }
                else if (!this.lawyers.Any())
                {
                    <RadzenCard class="m-3 shadow">
                        <LawyersNotFound></LawyersNotFound>
                    </RadzenCard>
                }
                else
                {
                    <Virtualize Items="@lawyers" Context="Lawyer" TItem="AllLawyersModel" ItemSize="6">
                        <LawyerCard Lawyer="Lawyer"></LawyerCard>
                    </Virtualize>
                }
            </div>
        </div>
    </div>
</div>
@* *@
<style>


    .rz-rating .rzi-star {
        color: #fc0 !important;
    }

    .countposition {
        vertical-align: super;
    }

    .smallspan {
        font-size: 80%;
        color: #00900e;
    }

    .shadow {
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    }

    .marg {
        margin-top: 80px;
        margin-bottom: 120px;
    }

    .containershadow {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    }

    .shading {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
        background-color: #00BFFF;
    }

    .btn.btn-round {
        border-radius: 2px;
    }

    .btn-border-d {
        background: transparent;
        border: 1px solid #111111;
        color: #111;
    }

    .btn {
        border-radius: 0;
        font-family: "Roboto Condensed", sans-serif;
        text-transform: uppercase;
        letter-spacing: 2px;
        font-size: 11px;
        padding: 8px 37px;
    }

        .btn.btn-border-d:hover,
        .btn.btn-border-d:focus {
            background: #111111;
            color: #fff;
        }

    .btn-block {
        display: block;
        width: 100%;
    }

    a .btn {
        transition: all 0.125s ease-in-out 0s;
    }

    .rz-rating .rzi-star {
        color: #fc0;
    }
</style>

@code {
    int zoom = 3;

    [Parameter]
    public string? SearchByTown { get; set; } = null;

    [Parameter]
    public string? SearchByArea { get; set; } = null;

    string? name;

    private List<string>? languages;

    string? town;
    string? area;
    bool FreeFirstAppoitment = false;
    string? language = null;

    bool FixedCost = false;


    private LawyerPageTownAndAreaViewModel? model;
    [Parameter]
    public ICollection<AllLawyersModel>? lawyers { get; set; }
    private ICollection<AllLawyersModel>? allLawyers;
    HttpClient? client;

    protected override async Task OnInitializedAsync()
    {
        languages = new List<string>(){
                 "Азерски","Албански","Английски",
                 "Арабски","Арменски","Африкаанс",
                 "Беларуски","Босненски","Български",
                 "Виетнамски","Датски","Есперанто",
                 "Естонски","Грузински","Немски",
                 "Гръцки","Зулуски","Иврит",
                 "Хинди","Исландски","Индонезийски",
                 "Ирландски","Испански","Италиански",
                 "Казахски","Каталонски","Кечуа",
                 "Китайски","Корейски","Корсикански",
                 "Кюрдски","Латински","Латвийски",
                 "Литовски","Люксембургски","Македонски",
                 "Малайски","Малтийски","Монголски",
                 "Норвежки","Персийски","Полски",
                 "Португалски","Пущунски","Румънски",
                 "Руски","Сръбски","Словашки",
                 "Словенски","Суахили","Таджикски",
                 "Татарски","Тайландски","Турски",
                 "Тюркменски","Уелски","Узбекски",
                 "Украински","Унгарски","Урду",
                 "Фарси","Фарьорски","Финландски",
                 "Френски","Холандски","Хърватски",
                  "Чешки","Шведски","Японски",
            };

        client = ClientFactory.CreateClient("LaweyrServices.Web.ServerAPI.NoAuthenticationClient");
        try
        {
            model = await client.GetFromJsonAsync<LawyerPageTownAndAreaViewModel>("Company/GetTownAndArea");

            var exist = model.Towns.Any(t => t.Name == SearchByTown);
            if (!exist)
            {
                area = SearchByTown;
                town = null;
                SearchByArea = SearchByTown;
                StateHasChanged();
            }
            else
            {
                town = SearchByTown;
                area = SearchByArea;

                StateHasChanged();
            }
            this.lawyers = await client?.GetFromJsonAsync<ICollection<AllLawyersModel>>($"Company/Search?name={name}&town={town}&area={area}");
            allLawyers = lawyers;
            await base.OnInitializedAsync();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    private void FreeFirstAppoitmentCheck(ChangeEventArgs ev)
    {
        FreeFirstAppoitment = (Boolean)ev.Value;

        if (FreeFirstAppoitment == true)
        {
            if (language != null && FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FreeFirstAppointment == true && x.FixedCost == true).ToList();

            }
            else if (language != null)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) == true && x.FreeFirstAppointment == true).ToList();

            }
            else if (FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true && x.FixedCost == true).ToList();

            }
            else
            {
                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true).ToList();

            }
        }
        else
        {
            if (language != null && FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FixedCost == true).ToList();
            }
            else if (language != null)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language)).ToList();
            }
            if (FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.FixedCost == true).ToList();
            }
            else
            {
                this.lawyers = allLawyers;
            }
        }

        StateHasChanged();
    }
    private void FixedCostCheck(ChangeEventArgs ev)
    {
        FixedCost = (Boolean)ev.Value;

        if (FixedCost == true)
        {
            if (language != null && FreeFirstAppoitment == true)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FreeFirstAppointment == true && x.FixedCost == true).ToList();
            }
            else if (language != null)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FixedCost == true).ToList();

            }
            if (FreeFirstAppoitment == true)
            {

                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true && x.FixedCost == true).ToList();
            }
            else
            {
                this.lawyers = allLawyers.Where(x => x.FixedCost == true).ToList();
            }
        }
        else
        {
            if (language != null && FreeFirstAppoitment == true)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FreeFirstAppointment == true).ToList();
            }
            else if (language != null)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language)).ToList();
            }
            if (FreeFirstAppoitment == true)
            {
                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true).ToList();
            }
            else
            {
                this.lawyers = allLawyers;
            }
        }

        StateHasChanged();
    }

    private void OnAddLanguages(object value, string name)
    {

        if (value != null)
        {
            language = value.ToString();
            if (FreeFirstAppoitment == true && FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FreeFirstAppointment == true && x.FixedCost == true).ToList();
            }
            else if (FreeFirstAppoitment == true)
            {

                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FreeFirstAppointment == true).ToList();
            }
            else if (FixedCost == true)
            {

                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language) && x.FixedCost == true).ToList();
            }
            else
            {
                this.lawyers = allLawyers.Where(x => x.Languages.Contains(language)).ToList();
            }

        }
        else
        {
            if (FreeFirstAppoitment == true && FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true && x.FixedCost == true).ToList();
            }
            else if (FixedCost == true)
            {
                this.lawyers = allLawyers.Where(x => x.FixedCost == true).ToList();
            }
            else if (FreeFirstAppoitment == true)
            {
                this.lawyers = allLawyers.Where(x => x.FreeFirstAppointment == true).ToList();
            }
            else
            {
                this.lawyers = allLawyers;
            }
        }

        StateHasChanged();
    }
    void OnChangeArea(object value, string name)
    {

        if (value != null)
        {
            area = value.ToString();
            SearchByArea = value.ToString();
            StateHasChanged();
        }
        else
        {
            area = null;
        }        

    }
    void OnChange(object value, string name)
    {
        if (value != null)
        {
            town = value.ToString();
            SearchByTown = value.ToString();

            StateHasChanged();
        }
         else
        {
            town = null;
        }  
    }
    void OnFolow(string id)
    {
        this.NavigationManager.NavigateTo($"lawyer/{id}");
    }
    async void OnSearch()
    {
        var exist = model.Towns.Any(t => t.Name == SearchByTown);
        if (!exist)
        {
            SearchByTown = area;
            //this.NavigationManager.NavigateTo($"lawyers/{SearchByTown}");
            this.lawyers = await client?.GetFromJsonAsync<ICollection<AllLawyersModel>>($"Company/Search?name={name}&town={town}&area={area}");
            allLawyers = lawyers;
            StateHasChanged();
        }
        else
        {
            this.lawyers = await client?.GetFromJsonAsync<ICollection<AllLawyersModel>>($"Company/Search?name={name}&town={town}&area={area}");
            allLawyers = lawyers;
            //this.NavigationManager.NavigateTo($"lawyers/{SearchByTown}/{SearchByArea}");
        }


        this.allLawyers = await client?.GetFromJsonAsync<ICollection<AllLawyersModel>>($"Company/Search?name={name}&town={town}&area={area}");
        StateHasChanged();
    }

}
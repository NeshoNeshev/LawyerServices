@page "/feedback/{LawyerId}/{WteId}"
@using LaweyrServices.Web.Shared.LawyerViewModels
@using LaweyrServices.Web.Shared.RatingModels
@using LaweyrServices.Web.Shared.WorkingTimeModels
@inject HttpClient Http
<AuthorizeView Roles="User">
    <Authorized>
        <section class="section section-lawyer">
            <div class="container">
                <div class="col-lg-12">
                    <div class="Scriptcontent">
                        <div class="feedback">
                            <p>
                                Уважаеми @lawyer?.UserFirstName,<br>
                                Благодарим ви, че използвате Правен портал за да изберете адвокат. Бихте ли оценили как се
                                е справил адвокат @lawyer?.Names. Моля, отделете малко време, за да ни дадете обратна връзка, тъй като тя ще помогне на потрбителите да  на правят правилен избор.
                            </p>
                            <h4>Моля, оценете Адвокат @lawyer?.Names със следните параметри</h4>
                            @if (inputModel == null)
                            {
                                <p>loading</p>
                            }
                            else
                            {
                                <label>1. Цялостно обслужване </label>

                                <br>
                                <span>
                                    <RadzenRating Change=@(args => OnChangeServiceGreade(args, "Rating with 5 stars")) />
                                        <RadzenNumericRangeValidator Component="inputModel.ServiceGreade" Min="1" Max="5" Text="Поставете оценка !" Style="position: absolute" />
                                   
                                </span>
                                <hr>
                                <label>2. Доверие</label>

                                <br>
                                <span>
                                    <RadzenRating Change=@(args => OnChangeTrustworthyGreade(args, "Rating with 5 stars")) />
                                    <RadzenNumericRangeValidator Component="inputModel.TrustworthyGreade" Min="1" Max="5" Text="Поставете оценка !" Style="position: absolute" />

                                </span>
                                <EditForm Context="Form" Model="@inputModel" OnValidSubmit="@HandleValidSubmit">
                                    <DataAnnotationsValidator />

                                    <hr class="survey-hr">
                                    <label>3. Оставете коментар:</label><br /><br />
                                    <InputTextArea @bind-Value="inputModel.Commentary" cols="75" name="commentText" rows="5" style="100%"></InputTextArea><br>
                                    <ValidationMessage For="@(() => inputModel.Commentary)" />
                                    <br>
                                    <div class="clear"></div>
                                    <input style="background:#43a7d5;color:#fff;padding:12px;border:0" type="submit" value="Изпратете своята оценка">&nbsp;
                                </EditForm>
                            }

                        </div>

                    </div>
                </div>
            </div>
        </section>



    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/notfound");
        }
    </NotAuthorized>
</AuthorizeView>


@code {


    [Parameter]
    public string? LawyerId { get; set; }

    [Parameter]
    public string? WteId { get; set; }

    private LawyerToReviewViewModel? lawyer;

    public RatingInputModel? inputModel;

    protected override async Task OnInitializedAsync()
    {
        inputModel = new RatingInputModel();
        var exist = await this.Http.GetFromJsonAsync<bool>($"Review/ExistingReview?id={WteId}");
        if (exist)
        {
            NavigationManager.NavigateTo("/client");
        }
        else
        {
            var response = await this.Http.GetFromJsonAsync<LawyerToReviewViewModel>($"Review/GetLawyer?lawyerId={LawyerId}");
            if (response != null)
            {
                lawyer = response;
            }
            else
            {
                NavigationManager.NavigateTo("/notfound");
            }
        }

        await base.OnInitializedAsync();

    }
    private async Task HandleValidSubmit()
    {
        inputModel.CompanyId = LawyerId;
        inputModel.WteId = WteId;
        var response = await this.Http.PostAsJsonAsync("Review/CreateRatingAsync", inputModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/thank-you");
        }
        // Process the valid form
    }
    void OnChangeServiceGreade(int value, string name)
    {
        inputModel.ServiceGreade = (byte)value;
    }
    void OnChangeTrustworthyGreade(int value, string name)
    {
        inputModel.TrustworthyGreade = (byte)value;
    }
}
